/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { array, lazy, object, optional, Schema, string } from '../schema';
import {
  DownloadTimeWindow,
  downloadTimeWindowSchema,
} from './downloadTimeWindow';

export interface UploadAndScheduleFileRequest {
  /** The campaign name. */
  campaignName?: string;
  /** The name of the file you are upgrading to. */
  fileName?: string;
  /** The version of the file you are upgrading to. */
  fileVersion?: string;
  /** Valid values */
  distributionType?: string;
  /** Campaign start date. */
  startDate?: string;
  /** Campaign end date. */
  endDate?: string;
  /** Specifies the starting date the client should download the package. If null, client downloads as soon as possible. */
  downloadAfterDate?: string;
  /** List of allowed download time windows. */
  downloadTimeWindowList?: DownloadTimeWindow[];
  /** The date after which you install the package. If null, install as soon as possible. */
  installAfterDate?: string;
  /** List of allowed install time windows. */
  installTimeWindowList?: DownloadTimeWindow[];
  /** Device IMEI list. */
  deviceList?: string[];
}

export const uploadAndScheduleFileRequestSchema: Schema<UploadAndScheduleFileRequest> = object(
  {
    campaignName: ['campaignName', optional(string())],
    fileName: ['fileName', optional(string())],
    fileVersion: ['fileVersion', optional(string())],
    distributionType: ['distributionType', optional(string())],
    startDate: ['startDate', optional(string())],
    endDate: ['endDate', optional(string())],
    downloadAfterDate: ['downloadAfterDate', optional(string())],
    downloadTimeWindowList: [
      'downloadTimeWindowList',
      optional(array(lazy(() => downloadTimeWindowSchema))),
    ],
    installAfterDate: ['installAfterDate', optional(string())],
    installTimeWindowList: [
      'installTimeWindowList',
      optional(array(lazy(() => downloadTimeWindowSchema))),
    ],
    deviceList: ['deviceList', optional(array(string()))],
  }
);
