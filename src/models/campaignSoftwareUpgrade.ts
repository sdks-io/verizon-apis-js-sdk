/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { array, lazy, object, optional, Schema, string } from '../schema';
import { V2TimeWindow, v2TimeWindowSchema } from './v2TimeWindow';

/** Software upgrade information. */
export interface CampaignSoftwareUpgrade {
  /** Campaign name. */
  campaignName?: string;
  /** Software name to upgrade to. */
  softwareName: string;
  /** Old software name. */
  softwareFrom: string;
  /** New software name. */
  softwareTo: string;
  /** OMA or HTTP. */
  distributionType: string;
  /** Campaign start date. */
  startDate: string;
  /** Campaign end date. */
  endDate: string;
  /** Specifies starting date client should download package. If null, client will download as soon as possible. */
  downloadAfterDate?: string;
  /** List of allowed download time windows. */
  downloadTimeWindowList?: V2TimeWindow[];
  /** Client will install package after date. If null, client will install as soon as possible. */
  installAfterDate?: string;
  /** List of allowed install time windows. */
  installTimeWindowList?: V2TimeWindow[];
  /** Device IMEI list. */
  deviceList: string[];
}

export const campaignSoftwareUpgradeSchema: Schema<CampaignSoftwareUpgrade> = object(
  {
    campaignName: ['campaignName', optional(string())],
    softwareName: ['softwareName', string()],
    softwareFrom: ['softwareFrom', string()],
    softwareTo: ['softwareTo', string()],
    distributionType: ['distributionType', string()],
    startDate: ['startDate', string()],
    endDate: ['endDate', string()],
    downloadAfterDate: ['downloadAfterDate', optional(string())],
    downloadTimeWindowList: [
      'downloadTimeWindowList',
      optional(array(lazy(() => v2TimeWindowSchema))),
    ],
    installAfterDate: ['installAfterDate', optional(string())],
    installTimeWindowList: [
      'installTimeWindowList',
      optional(array(lazy(() => v2TimeWindowSchema))),
    ],
    deviceList: ['deviceList', array(string())],
  }
);
