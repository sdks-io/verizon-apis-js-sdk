/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { array, lazy, object, optional, Schema } from '../schema';
import {
  AdvanceConfiguration,
  advanceConfigurationSchema,
} from './advanceConfiguration';
import {
  CloudDestributionEnum,
  cloudDestributionEnumSchema,
} from './cloudDestributionEnum';
import { CloudProviderEnum, cloudProviderEnumSchema } from './cloudProviderEnum';
import {
  ClusterConfiguration,
  clusterConfigurationSchema,
} from './clusterConfiguration';
import {
  CommonConfiguration,
  commonConfigurationSchema,
} from './commonConfiguration';
import { NodeConfiguration, nodeConfigurationSchema } from './nodeConfiguration';

export interface Cloud {
  /** Cloud provider where you plan to provision and operate your Kubernetes cluster. */
  provider?: CloudProviderEnum;
  /** Supported Kubernetes distribution for the selected cloud provider. */
  distribution?: CloudDestributionEnum;
  commonConfig?: CommonConfiguration;
  clusterConfig?: ClusterConfiguration;
  nodeConfig?: NodeConfiguration;
  nodeConfigs?: NodeConfiguration[];
  advanceConfig?: AdvanceConfiguration;
}

export const cloudSchema: Schema<Cloud> = object({
  provider: ['provider', optional(cloudProviderEnumSchema)],
  distribution: ['distribution', optional(cloudDestributionEnumSchema)],
  commonConfig: [
    'commonConfig',
    optional(lazy(() => commonConfigurationSchema)),
  ],
  clusterConfig: [
    'clusterConfig',
    optional(lazy(() => clusterConfigurationSchema)),
  ],
  nodeConfig: ['nodeConfig', optional(lazy(() => nodeConfigurationSchema))],
  nodeConfigs: [
    'nodeConfigs',
    optional(array(lazy(() => nodeConfigurationSchema))),
  ],
  advanceConfig: [
    'advanceConfig',
    optional(lazy(() => advanceConfigurationSchema)),
  ],
});
