/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  lazy,
  nullable,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  EdgeServiceRepository,
  edgeServiceRepositorySchema,
} from './edgeServiceRepository';
import { PackageTypeEnum, packageTypeEnumSchema } from './packageTypeEnum';
import {
  RepositoryTypeEnum,
  repositoryTypeEnumSchema,
} from './repositoryTypeEnum';
import { RevisionTypeEnum, revisionTypeEnumSchema } from './revisionTypeEnum';
import {
  ServiceLaunchHelmGitBranch,
  serviceLaunchHelmGitBranchSchema,
} from './serviceLaunchHelmGitBranch';
import {
  ServiceLaunchHelmGitTag,
  serviceLaunchHelmGitTagSchema,
} from './serviceLaunchHelmGitTag';
import {
  ServiceLaunchHelmRepo,
  serviceLaunchHelmRepoSchema,
} from './serviceLaunchHelmRepo';
import {
  ServiceLaunchHelmYamlGitTag,
  serviceLaunchHelmYamlGitTagSchema,
} from './serviceLaunchHelmYamlGitTag';
import {
  ServiceLaunchTerraformGitBranch,
  serviceLaunchTerraformGitBranchSchema,
} from './serviceLaunchTerraformGitBranch';
import {
  ServiceLaunchTerraformGitTag,
  serviceLaunchTerraformGitTagSchema,
} from './serviceLaunchTerraformGitTag';
import {
  ServiceLaunchYamlGitBranch,
  serviceLaunchYamlGitBranchSchema,
} from './serviceLaunchYamlGitBranch';
import {
  WorkloadUploadTypeEnum,
  workloadUploadTypeEnumSchema,
} from './workloadUploadTypeEnum';

export interface EdgeServiceWorkload {
  id?: string;
  /** Name of the workload needs to be deployed. */
  name: string;
  description?: string | null;
  /** Deployment package type. */
  packageType?: PackageTypeEnum | null;
  uploadType?: WorkloadUploadTypeEnum | null;
  repositoryType?: RepositoryTypeEnum | null;
  repositoryId?: string | null;
  repository?: EdgeServiceRepository;
  files?: string[];
  revisionType?: RevisionTypeEnum | null;
  helmGitBranch?: ServiceLaunchHelmGitBranch;
  helmGitTag?: ServiceLaunchHelmGitTag;
  helmYamlGitTag?: ServiceLaunchHelmYamlGitTag;
  helmRepo?: ServiceLaunchHelmRepo;
  yamlGitBranch?: ServiceLaunchYamlGitBranch;
  terraformGitBranch?: ServiceLaunchTerraformGitBranch;
  terraformGitTag?: ServiceLaunchTerraformGitTag;
  createdDate?: string;
  lastModifiedDte?: string;
  createdBy?: string;
  updatedBy?: string;
}

export const edgeServiceWorkloadSchema: Schema<EdgeServiceWorkload> = object({
  id: ['id', optional(string())],
  name: ['name', string()],
  description: ['description', optional(nullable(string()))],
  packageType: ['packageType', optional(nullable(packageTypeEnumSchema))],
  uploadType: ['uploadType', optional(nullable(workloadUploadTypeEnumSchema))],
  repositoryType: [
    'repositoryType',
    optional(nullable(repositoryTypeEnumSchema)),
  ],
  repositoryId: ['repositoryId', optional(nullable(string()))],
  repository: ['repository', optional(lazy(() => edgeServiceRepositorySchema))],
  files: ['files', optional(array(string()))],
  revisionType: ['revisionType', optional(nullable(revisionTypeEnumSchema))],
  helmGitBranch: [
    'helmGitBranch',
    optional(lazy(() => serviceLaunchHelmGitBranchSchema)),
  ],
  helmGitTag: [
    'helmGitTag',
    optional(lazy(() => serviceLaunchHelmGitTagSchema)),
  ],
  helmYamlGitTag: [
    'helmYamlGitTag',
    optional(lazy(() => serviceLaunchHelmYamlGitTagSchema)),
  ],
  helmRepo: ['helmRepo', optional(lazy(() => serviceLaunchHelmRepoSchema))],
  yamlGitBranch: [
    'yamlGitBranch',
    optional(lazy(() => serviceLaunchYamlGitBranchSchema)),
  ],
  terraformGitBranch: [
    'terraformGitBranch',
    optional(lazy(() => serviceLaunchTerraformGitBranchSchema)),
  ],
  terraformGitTag: [
    'terraformGitTag',
    optional(lazy(() => serviceLaunchTerraformGitTagSchema)),
  ],
  createdDate: ['createdDate', optional(string())],
  lastModifiedDte: ['lastModifiedDte', optional(string())],
  createdBy: ['createdBy', optional(string())],
  updatedBy: ['updatedBy', optional(string())],
});
