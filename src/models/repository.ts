/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  nullable,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import {
  EdgeServiceRepositoryTypeEnum,
  edgeServiceRepositoryTypeEnumSchema,
} from './edgeServiceRepositoryTypeEnum';
import {
  RepositoryCredential,
  repositoryCredentialSchema,
} from './repositoryCredential';
import {
  RepositoryCredentialTypeEnum,
  repositoryCredentialTypeEnumSchema,
} from './repositoryCredentialTypeEnum';
import {
  RepositoryReacheabilityEnum,
  repositoryReacheabilityEnumSchema,
} from './repositoryReacheabilityEnum';

/** Users can create a repository to maintain service artifacts. Repository would be either a Git or HELM repository. */
export interface Repository {
  /** System generated unique identifier to identify repository uniquely. */
  id?: string;
  /** Name of the repository to be created. */
  name: string;
  /** Description of the repository being created. */
  description?: string;
  /** Type for the repository which can be Git or Helm. */
  type?: EdgeServiceRepositoryTypeEnum;
  /** Attribute which can be used to tag a repository. */
  tag?: string;
  /** Endpoint URL for the repository from where resources needs to be fetched. */
  endpoint?: string;
  /** Reachability can be of two types, Internet and Private Network. */
  reacheability?: RepositoryReacheabilityEnum;
  /** Required if your repository uses a private certificate authencation.Please provide ur CA certificat in PEM format. */
  cACertificate?: string;
  /** This attribute can be used to specify GITOps Agent to fetch details from private repository. */
  agents?: string[] | null;
  /** Boolean value to check the SSL certification. */
  sslDisabled?: boolean;
  /** True if CSP is validated using provided credential, false otherwise. */
  isValidated?: boolean;
  /** Status when the repository is validated eg: CREDENTIAL_VALIDATION_SUCCESS. */
  validationStatus?: string;
  /** Credentials can be of two types, UserPassCredentials and SSHCredentials. */
  credentialsType?: RepositoryCredentialTypeEnum;
  /** Credentials of a repository. */
  credentials?: RepositoryCredential;
  /** SSH Private Key in PEM format. */
  sshKey?: string;
  /** Time when the repository was validated. */
  lastValidatedDate?: string;
  /** Date when the repository was created. */
  createdDate?: string;
  /** Date when the repository was updated. */
  lastModifiedDate?: string;
  /** User information by whom the repository was created. */
  createdBy?: string;
  /** User information by whom the repository was updated. */
  updatedBy?: string;
  /** When it will be soft deleted, status will be changed. */
  isDeleted?: boolean;
}

export const repositorySchema: Schema<Repository> = object({
  id: ['id', optional(string())],
  name: ['name', string()],
  description: ['description', optional(string())],
  type: ['type', optional(edgeServiceRepositoryTypeEnumSchema)],
  tag: ['tag', optional(string())],
  endpoint: ['endpoint', optional(string())],
  reacheability: ['reacheability', optional(repositoryReacheabilityEnumSchema)],
  cACertificate: ['CACertificate', optional(string())],
  agents: ['Agents', optional(nullable(array(string())))],
  sslDisabled: ['sslDisabled', optional(boolean())],
  isValidated: ['isValidated', optional(boolean())],
  validationStatus: ['validationStatus', optional(string())],
  credentialsType: [
    'credentialsType',
    optional(repositoryCredentialTypeEnumSchema),
  ],
  credentials: [
    'credentials',
    optional(lazy(() => repositoryCredentialSchema)),
  ],
  sshKey: ['sshKey', optional(string())],
  lastValidatedDate: ['lastValidatedDate', optional(string())],
  createdDate: ['createdDate', optional(string())],
  lastModifiedDate: ['lastModifiedDate', optional(string())],
  createdBy: ['createdBy', optional(string())],
  updatedBy: ['updatedBy', optional(string())],
  isDeleted: ['isDeleted', optional(boolean())],
});
