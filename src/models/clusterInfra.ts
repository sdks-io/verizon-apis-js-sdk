/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  number,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { Cluster, clusterSchema } from './cluster';
import {
  ClusterInfraProvision,
  clusterInfraProvisionSchema,
} from './clusterInfraProvision';
import {
  ClusterProviderParams,
  clusterProviderParamsSchema,
} from './clusterProviderParams';
import {
  ClusterVersionInfo,
  clusterVersionInfoSchema,
} from './clusterVersionInfo';
import { Metro, metroSchema } from './metro';
import { Node, nodeSchema } from './node';
import { NodeGroupItem, nodeGroupItemSchema } from './nodeGroupItem';
import { ProjectItem, projectItemSchema } from './projectItem';
import { StorageClassMap, storageClassMapSchema } from './storageClassMap';

export interface ClusterInfra {
  name?: string;
  createdAt?: string;
  modifiedAt?: string;
  organizationId?: string;
  partnerId?: string;
  country?: string;
  city?: string;
  latitude?: string;
  longitude?: string;
  clusterId?: string;
  status?: string;
  cert?: string;
  passphrase?: string;
  id?: string;
  cname?: string;
  arecord?: string;
  baseRatio?: number;
  haEnabled?: boolean;
  displayName?: string;
  upgradeStatus?: string;
  providerId?: string;
  autoCreate?: boolean;
  autoApproveNodes?: boolean;
  provisionId?: string;
  isMonitorEnabled?: boolean;
  health?: number;
  healthStatusModifiedAt?: string;
  manufacturer?: string;
  clusterType?: string;
  clusterBlueprint?: string;
  gimageUsed?: string;
  reason?: string;
  isMasterDedicated?: boolean;
  projectId?: string;
  provisionOs?: string;
  defaultStorageClass?: string;
  storageClassMap?: StorageClassMap;
  cniProvider?: string;
  provisionK8s?: string;
  etcdVersion?: string;
  consulVersion?: string;
  clusterBlueprintVersion?: string;
  upgradeProtection?: boolean;
  provision?: ClusterInfraProvision;
  metro?: Metro;
  nodes?: Node[];
  clusterProviderParams?: ClusterProviderParams;
  nodegroups?: NodeGroupItem[];
  clusterVersionInfo?: ClusterVersionInfo;
  projects?: ProjectItem[];
  cluster?: Cluster;
}

export const clusterInfraSchema: Schema<ClusterInfra> = object({
  name: ['name', optional(string())],
  createdAt: ['created_at', optional(string())],
  modifiedAt: ['modified_at', optional(string())],
  organizationId: ['organization_id', optional(string())],
  partnerId: ['partner_id', optional(string())],
  country: ['country', optional(string())],
  city: ['city', optional(string())],
  latitude: ['latitude', optional(string())],
  longitude: ['longitude', optional(string())],
  clusterId: ['cluster_id', optional(string())],
  status: ['status', optional(string())],
  cert: ['cert', optional(string())],
  passphrase: ['passphrase', optional(string())],
  id: ['id', optional(string())],
  cname: ['cname', optional(string())],
  arecord: ['arecord', optional(string())],
  baseRatio: ['base_ratio', optional(number())],
  haEnabled: ['ha_enabled', optional(boolean())],
  displayName: ['display_name', optional(string())],
  upgradeStatus: ['upgradeStatus', optional(string())],
  providerId: ['provider_id', optional(string())],
  autoCreate: ['auto_create', optional(boolean())],
  autoApproveNodes: ['auto_approve_nodes', optional(boolean())],
  provisionId: ['provision_id', optional(string())],
  isMonitorEnabled: ['is_monitor_enabled', optional(boolean())],
  health: ['health', optional(number())],
  healthStatusModifiedAt: ['health_status_modified_at', optional(string())],
  manufacturer: ['manufacturer', optional(string())],
  clusterType: ['cluster_type', optional(string())],
  clusterBlueprint: ['cluster_blueprint', optional(string())],
  gimageUsed: ['gimage_used', optional(string())],
  reason: ['reason', optional(string())],
  isMasterDedicated: ['is_master_dedicated', optional(boolean())],
  projectId: ['project_id', optional(string())],
  provisionOs: ['provision_os', optional(string())],
  defaultStorageClass: ['default_storage_class', optional(string())],
  storageClassMap: [
    'storage_class_map',
    optional(lazy(() => storageClassMapSchema)),
  ],
  cniProvider: ['cni_provider', optional(string())],
  provisionK8s: ['provision_k8s', optional(string())],
  etcdVersion: ['etcd_version', optional(string())],
  consulVersion: ['consul_version', optional(string())],
  clusterBlueprintVersion: ['cluster_blueprint_version', optional(string())],
  upgradeProtection: ['upgrade_protection', optional(boolean())],
  provision: ['provision', optional(lazy(() => clusterInfraProvisionSchema))],
  metro: ['Metro', optional(lazy(() => metroSchema))],
  nodes: ['nodes', optional(array(lazy(() => nodeSchema)))],
  clusterProviderParams: [
    'cluster_provider_params',
    optional(lazy(() => clusterProviderParamsSchema)),
  ],
  nodegroups: ['nodegroups', optional(array(lazy(() => nodeGroupItemSchema)))],
  clusterVersionInfo: [
    'cluster_version_info',
    optional(lazy(() => clusterVersionInfoSchema)),
  ],
  projects: ['projects', optional(array(lazy(() => projectItemSchema)))],
  cluster: ['cluster', optional(lazy(() => clusterSchema))],
});
