/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { lazy, object, optional, Schema, string } from '../schema';
import { ClientTypeEnum, clientTypeEnumSchema } from './clientTypeEnum';
import {
  ComputeResourcesType,
  computeResourcesTypeSchema,
} from './computeResourcesType';
import {
  MECPlatformsAdditionalSupportInfo,
  mECPlatformsAdditionalSupportInfoSchema,
} from './mECPlatformsAdditionalSupportInfo';
import {
  NetworkResourcesType,
  networkResourcesTypeSchema,
} from './networkResourcesType';

/** Information about the resource requirements and service characteristics of an edge application. Includes serviceProfileId. Used when retrieving a service profile. */
export interface ResourcesServiceProfileWithId {
  /** Unique identifier for a service profile. */
  serviceProfileId?: string;
  /** The category of application client. */
  clientType: ClientTypeEnum;
  /** Identity of the preferred Edge Computing Service Provider. */
  ecspFilter?: string;
  /** The expected operation schedule of the application client (e.g. time windows). */
  clientSchedule?: string;
  /** The expected location(s) (e.g. route) of the hosting UE during the Client's operation schedule. */
  clientServiceArea?: string;
  /** Network resources of a service profile. */
  networkResources?: NetworkResourcesType;
  /** Compute resources of a service profile. */
  computeResources?: ComputeResourcesType;
  /** Additional service support information for the MEC platform. */
  properties?: MECPlatformsAdditionalSupportInfo;
}

export const resourcesServiceProfileWithIdSchema: Schema<ResourcesServiceProfileWithId> = object(
  {
    serviceProfileId: ['serviceProfileId', optional(string())],
    clientType: ['clientType', clientTypeEnumSchema],
    ecspFilter: ['ecspFilter', optional(string())],
    clientSchedule: ['clientSchedule', optional(string())],
    clientServiceArea: ['clientServiceArea', optional(string())],
    networkResources: [
      'networkResources',
      optional(lazy(() => networkResourcesTypeSchema)),
    ],
    computeResources: [
      'computeResources',
      optional(lazy(() => computeResourcesTypeSchema)),
    ],
    properties: [
      'properties',
      optional(lazy(() => mECPlatformsAdditionalSupportInfoSchema)),
    ],
  }
);
