/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  array,
  boolean,
  lazy,
  object,
  optional,
  Schema,
  string,
} from '../schema';
import { V3SoftwareInfo, v3SoftwareInfoSchema } from './v3SoftwareInfo';

/** Device information. */
export interface V3Device {
  /** Device IMEI. */
  deviceId: string;
  /** Success or failure. */
  requestStatus?: string;
  resultReason?: string;
  /** MDN. */
  mdn?: string;
  /** Device model. */
  model?: string;
  /** Device make. */
  make?: string;
  /** Device firmware version. */
  firmware?: string;
  /** Value=true if the device software can be upgraded over the air using the Software Management Services API. */
  fotaEligible?: boolean;
  /** Device status. */
  status?: string;
  /** License assigned device. */
  licenseAssigned?: boolean;
  /** Firmware protocol. Valid values include: LWM2M, OMADM, HTTP or NONE. */
  protocol?: string;
  /** List of sofware. */
  softwareList?: V3SoftwareInfo[];
  /** List of files. */
  fileList?: V3SoftwareInfo[];
  /** The date and time of when the device is created. */
  createTime?: string;
  /** The date and time of when the device firmware or software is updated. */
  statusTime?: string;
  /** The date and time of when the device is updated. */
  updateTime?: string;
  /** The date and time of when the device is refreshed. */
  refreshTime?: string;
  /** The date and time of when the device reachability is checked. */
  lastConnectionTime?: string;
}

export const v3DeviceSchema: Schema<V3Device> = object({
  deviceId: ['deviceId', string()],
  requestStatus: ['requestStatus', optional(string())],
  resultReason: ['resultReason', optional(string())],
  mdn: ['mdn', optional(string())],
  model: ['model', optional(string())],
  make: ['make', optional(string())],
  firmware: ['firmware', optional(string())],
  fotaEligible: ['fotaEligible', optional(boolean())],
  status: ['status', optional(string())],
  licenseAssigned: ['licenseAssigned', optional(boolean())],
  protocol: ['protocol', optional(string())],
  softwareList: [
    'softwareList',
    optional(array(lazy(() => v3SoftwareInfoSchema))),
  ],
  fileList: ['fileList', optional(array(lazy(() => v3SoftwareInfoSchema)))],
  createTime: ['createTime', optional(string())],
  statusTime: ['statusTime', optional(string())],
  updateTime: ['updateTime', optional(string())],
  refreshTime: ['refreshTime', optional(string())],
  lastConnectionTime: ['lastConnectionTime', optional(string())],
});
