/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { array, lazy, object, optional, Schema, string } from '../schema';
import { IP, iPSchema } from './iP';
import {
  NodeStatusAllocatable,
  nodeStatusAllocatableSchema,
} from './nodeStatusAllocatable';
import {
  NodeStatusAllocated,
  nodeStatusAllocatedSchema,
} from './nodeStatusAllocated';
import {
  NodeStatusCapacity,
  nodeStatusCapacitySchema,
} from './nodeStatusCapacity';
import { NodeStatusInfo, nodeStatusInfoSchema } from './nodeStatusInfo';
import {
  StatusConditionItem,
  statusConditionItemSchema,
} from './statusConditionItem';

export interface NodeStatus {
  state?: string;
  conditions?: StatusConditionItem[];
  nodeInfo?: NodeStatusInfo;
  capacity?: NodeStatusCapacity;
  allocatable?: NodeStatusAllocatable;
  allocated?: NodeStatusAllocated;
  ips?: IP[];
}

export const nodeStatusSchema: Schema<NodeStatus> = object({
  state: ['state', optional(string())],
  conditions: [
    'conditions',
    optional(array(lazy(() => statusConditionItemSchema))),
  ],
  nodeInfo: ['nodeInfo', optional(lazy(() => nodeStatusInfoSchema))],
  capacity: ['capacity', optional(lazy(() => nodeStatusCapacitySchema))],
  allocatable: [
    'allocatable',
    optional(lazy(() => nodeStatusAllocatableSchema)),
  ],
  allocated: ['allocated', optional(lazy(() => nodeStatusAllocatedSchema))],
  ips: ['ips', optional(array(lazy(() => iPSchema)))],
});
