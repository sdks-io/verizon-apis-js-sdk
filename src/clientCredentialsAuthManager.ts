/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { OauthToken } from './models/oauthToken';
import { ClientInterface } from "./clientInterface";
import { OauthAuthorizationController} from './controllers/oauthAuthorizationController';
import { OauthScopeEnum } from './models/oauthScopeEnum';

export class ClientCredentialsAuthManager {
  private _oauthClientId: string;
  private _oauthClientSecret: string;
  private _oauthScopes?: OauthScopeEnum[];
  private _oAuthController: OauthAuthorizationController;

  constructor({
    oauthClientId,
    oauthClientSecret,
    oauthScopes,
  }:{
    oauthClientId: string,
    oauthClientSecret: string,
    oauthScopes?: OauthScopeEnum[],
  }, client: ClientInterface) {
    this._oauthClientId = oauthClientId;
    this._oauthClientSecret = oauthClientSecret;
    this._oauthScopes = oauthScopes;
    this._oAuthController = new OauthAuthorizationController(client);
  }

  public async fetchToken(
    additionalParams?: Record<string, unknown>
  ): Promise<OauthToken> {
    const authorization = this.getClientBasicAuth(
      this._oauthClientId,
      this._oauthClientSecret
    );
    const { result } = await this._oAuthController.requestToken(
      authorization,
      this._oauthScopes?.join(' '),
      additionalParams
    );
    return this.setExpiry(result);
  }
  
  private getClientBasicAuth(clientId: string, clientSecret: string): string {
    return `Basic ${Buffer.from(clientId + ':' + clientSecret,).toString(
      'base64'
    )}`;
  }

  private async setExpiry(token: OauthToken) {
    const newToken = token
    if (newToken.expiresIn) {
      newToken.expiry = BigInt(Math.round(Date.now() / 1000)) + newToken.expiresIn;
    }
    return newToken;
  }
}
