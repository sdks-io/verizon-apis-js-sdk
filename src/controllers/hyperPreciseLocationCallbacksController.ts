/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  HyperPreciseLocationResultError,
} from '../errors/hyperPreciseLocationResultError';
import {
  CallbackCreated,
  callbackCreatedSchema,
} from '../models/callbackCreated';
import {
  CallbackRegistered,
  callbackRegisteredSchema,
} from '../models/callbackRegistered';
import {
  HyperPreciseLocationCallback,
  hyperPreciseLocationCallbackSchema,
} from '../models/hyperPreciseLocationCallback';
import { array, string } from '../schema';
import { BaseController } from './baseController';

export class HyperPreciseLocationCallbacksController extends BaseController {
  /**
   * Find registered callback listener for account by account number.
   *
   * @param accountNumber A unique identifier for an account.
   * @return Response from the API call
   */
  async listRegisteredCallbacks(
    accountNumber: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CallbackCreated[]>> {
    const req = this.createRequest('GET', '/callbacks');
    req.baseUrl('Hyper Precise Location');
    const mapped = req.prepareArgs({
      accountNumber: [accountNumber, string()],
    });
    req.query('accountNumber', mapped.accountNumber);
    req.throwOn(400, HyperPreciseLocationResultError, 'Bad request.');
    req.throwOn(401, HyperPreciseLocationResultError, 'Unauthorized request. Access token is missing or invalid.');
    req.throwOn(403, HyperPreciseLocationResultError, 'Forbidden request.');
    req.throwOn(404, HyperPreciseLocationResultError, 'Bad request. Not found.');
    req.throwOn(409, HyperPreciseLocationResultError, 'Bad request. Conflict state.');
    req.throwOn(500, HyperPreciseLocationResultError, 'Internal Server Error.');
    return req.callAsJson(array(callbackCreatedSchema), requestOptions);
  }

  /**
   * Registers a URL at which an account receives asynchronous responses and other messages from a
   * ThingSpace Platform callback service. The messages are REST messages. You are responsible for
   * creating and running a listening process on your server at that URL to receive and parse the
   * messages.
   *
   * @param accountNumber A unique identifier for an account.
   * @param body
   * @return Response from the API call
   */
  async registerCallback(
    accountNumber: string,
    body: HyperPreciseLocationCallback,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CallbackRegistered>> {
    const req = this.createRequest('POST', '/callbacks');
    req.baseUrl('Hyper Precise Location');
    const mapped = req.prepareArgs({
      accountNumber: [accountNumber, string()],
      body: [body, hyperPreciseLocationCallbackSchema],
    });
    req.header('Content-Type', 'application/json');
    req.query('accountNumber', mapped.accountNumber);
    req.json(mapped.body);
    req.throwOn(400, HyperPreciseLocationResultError, 'Bad request.');
    req.throwOn(401, HyperPreciseLocationResultError, 'Unauthorized request. Access token is missing or invalid.');
    req.throwOn(403, HyperPreciseLocationResultError, 'Forbidden request.');
    req.throwOn(404, HyperPreciseLocationResultError, 'Bad request. Not found.');
    req.throwOn(409, HyperPreciseLocationResultError, 'Bad request. Conflict state.');
    req.throwOn(500, HyperPreciseLocationResultError, 'Internal Server Error.');
    return req.callAsJson(callbackRegisteredSchema, requestOptions);
  }

  /**
   * Stops ThingSpace from sending callback messages for the specified account and listener name.
   *
   * @param accountNumber A unique identifier for a account.
   * @param service       The name of the callback service that will be deleted.
   * @return Response from the API call
   */
  async deregisterCallback(
    accountNumber: string,
    service: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE', '/callbacks');
    req.baseUrl('Hyper Precise Location');
    const mapped = req.prepareArgs({
      accountNumber: [accountNumber, string()],
      service: [service, string()],
    });
    req.query('accountNumber', mapped.accountNumber);
    req.query('service', mapped.service);
    req.throwOn(400, HyperPreciseLocationResultError, 'Bad request.');
    req.throwOn(401, HyperPreciseLocationResultError, 'Unauthorized request. Access token is missing or invalid.');
    req.throwOn(403, HyperPreciseLocationResultError, 'Forbidden request.');
    req.throwOn(404, HyperPreciseLocationResultError, 'Bad request. Not found.');
    req.throwOn(409, HyperPreciseLocationResultError, 'Bad request. Conflict state.');
    req.throwOn(500, HyperPreciseLocationResultError, 'Internal Server Error.');
    return req.call(requestOptions);
  }
}
