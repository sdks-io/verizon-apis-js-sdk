/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  DeviceDiagnosticsResultError,
} from '../errors/deviceDiagnosticsResultError';
import {
  DiagnosticsObservationResult,
  diagnosticsObservationResultSchema,
} from '../models/diagnosticsObservationResult';
import {
  ObservationRequest,
  observationRequestSchema,
} from '../models/observationRequest';
import { string } from '../schema';
import { BaseController } from './baseController';

export class DiagnosticsObservationsController extends BaseController {
  /**
   * This endpoint allows the user to start or change observe diagnostics.
   *
   * @param body         Request for device observation information.
   * @return Response from the API call
   */
  async startDiagnosticsObservation(
    body: ObservationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DiagnosticsObservationResult>> {
    const req = this.createRequest(
      'POST',
      '/devices/attributes/actions/observe'
    );
    req.baseUrl('Device Diagnostics');
    const mapped = req.prepareArgs({ body: [body, observationRequestSchema] });
    req.header('Content-Type', '*/*');
    req.json(mapped.body);
    req.defaultToError(DeviceDiagnosticsResultError, 'Error response.');
    return req.callAsJson(diagnosticsObservationResultSchema, requestOptions);
  }

  /**
   * This endpoint allows the user to stop or reset observe diagnostics.
   *
   * @param transactionId The ID value associated with the transaction.
   * @param accountName   The numeric account name.
   * @return Response from the API call
   */
  async stopDiagnosticsObservation(
    transactionId: string,
    accountName: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DiagnosticsObservationResult>> {
    const req = this.createRequest(
      'DELETE',
      '/devices/attributes/actions/observe'
    );
    req.baseUrl('Device Diagnostics');
    const mapped = req.prepareArgs({
      transactionId: [transactionId, string()],
      accountName: [accountName, string()],
    });
    req.query('transactionId', mapped.transactionId);
    req.query('accountName', mapped.accountName);
    req.defaultToError(DeviceDiagnosticsResultError, 'Error response.');
    return req.callAsJson(diagnosticsObservationResultSchema, requestOptions);
  }
}
