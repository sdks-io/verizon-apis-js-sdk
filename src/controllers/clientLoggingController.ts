/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { FotaV2ResultError } from '../errors/fotaV2ResultError';
import { DeviceLog, deviceLogSchema } from '../models/deviceLog';
import {
  DeviceLoggingRequest,
  deviceLoggingRequestSchema,
} from '../models/deviceLoggingRequest';
import {
  DeviceLoggingStatus,
  deviceLoggingStatusSchema,
} from '../models/deviceLoggingStatus';
import { array, string } from '../schema';
import { BaseController } from './baseController';

export class ClientLoggingController extends BaseController {
  /**
   * Returns an array of all devices in the specified account for which logging is enabled.
   *
   * @param account Account identifier.
   * @return Response from the API call
   */
  async listDevicesWithLoggingEnabled(
    account: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceLoggingStatus[]>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({ account: [account, string()] });
    req.appendTemplatePath`/logging/${mapped.account}/devices`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(array(deviceLoggingStatusSchema), requestOptions);
  }

  /**
   * Each customer may have a maximum of 20 devices enabled for logging.
   *
   * @param account      Account identifier.
   * @param body         Device logging information.
   * @return Response from the API call
   */
  async enableLoggingForDevices(
    account: string,
    body: DeviceLoggingRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceLoggingStatus[]>> {
    const req = this.createRequest('PUT');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      body: [body, deviceLoggingRequestSchema],
    });
    req.header('Content-Type', '*/*');
    req.json(mapped.body);
    req.appendTemplatePath`/logging/${mapped.account}/devices`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(array(deviceLoggingStatusSchema), requestOptions);
  }

  /**
   * Turn logging off for a list of devices.
   *
   * @param account   Account identifier.
   * @param deviceIds The list of device IDs.
   * @return Response from the API call
   */
  async disableLoggingForDevices(
    account: string,
    deviceIds: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      deviceIds: [deviceIds, string()],
    });
    req.query('deviceIds', mapped.deviceIds);
    req.appendTemplatePath`/logging/${mapped.account}/devices`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.call(requestOptions);
  }

  /**
   * Enables logging for a specific device.
   *
   * @param account  Account identifier.
   * @param deviceId Device IMEI identifier.
   * @return Response from the API call
   */
  async enableDeviceLogging(
    account: string,
    deviceId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceLoggingStatus>> {
    const req = this.createRequest('PUT');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      deviceId: [deviceId, string()],
    });
    req.appendTemplatePath`/logging/${mapped.account}/devices/${mapped.deviceId}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(deviceLoggingStatusSchema, requestOptions);
  }

  /**
   * Disables logging for a specific device.
   *
   * @param account  Account identifier.
   * @param deviceId Device IMEI identifier.
   * @return Response from the API call
   */
  async disableDeviceLogging(
    account: string,
    deviceId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('DELETE');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      deviceId: [deviceId, string()],
    });
    req.appendTemplatePath`/logging/${mapped.account}/devices/${mapped.deviceId}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.call(requestOptions);
  }

  /**
   * Gets logs for a specific device.
   *
   * @param account  Account identifier.
   * @param deviceId Device IMEI identifier.
   * @return Response from the API call
   */
  async listDeviceLogs(
    account: string,
    deviceId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceLog[]>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      deviceId: [deviceId, string()],
    });
    req.appendTemplatePath`/logging/${mapped.account}/devices/${mapped.deviceId}/logs`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(array(deviceLogSchema), requestOptions);
  }
}
