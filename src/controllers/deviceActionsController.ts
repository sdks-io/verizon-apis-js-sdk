/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { AccountDetails, accountDetailsSchema } from '../models/accountDetails';
import { AggregateUsage, aggregateUsageSchema } from '../models/aggregateUsage';
import { DailyUsage, dailyUsageSchema } from '../models/dailyUsage';
import {
  DailyUsageResponse,
  dailyUsageResponseSchema,
} from '../models/dailyUsageResponse';
import {
  GetDeviceListWithProfilesRequest,
  getDeviceListWithProfilesRequestSchema,
} from '../models/getDeviceListWithProfilesRequest';
import {
  GIORequestResponse,
  gIORequestResponseSchema,
} from '../models/gIORequestResponse';
import {
  ProvhistoryRequest,
  provhistoryRequestSchema,
} from '../models/provhistoryRequest';
import { StatusResponse, statusResponseSchema } from '../models/statusResponse';
import { string } from '../schema';
import { BaseController } from './baseController';
import { GIORestErrorResponseError } from '../errors/gIORestErrorResponseError';

export class DeviceActionsController extends BaseController {
  /**
   * Retrieve the aggregate usage for a device or a number of devices.
   *
   * @param body
   * @return Response from the API call
   */
  async aggregateUsage(
    body: AggregateUsage,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GIORequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/v1/devices/usage/actions/list/aggregate'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ body: [body, aggregateUsageSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(GIORestErrorResponseError, 'Error response');
    req.authenticate([{ thingspaceOauth: true, vZM2mToken: true }]);
    return req.callAsJson(gIORequestResponseSchema, requestOptions);
  }

  /**
   * Retrieve the daily usage for a device, for a specified period of time, segmented by day
   *
   * @param body
   * @return Response from the API call
   */
  async dailyUsage(
    body: DailyUsage,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DailyUsageResponse>> {
    const req = this.createRequest('POST', '/v1/devices/usage/actions/list');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ body: [body, dailyUsageSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(GIORestErrorResponseError, 'Error response');
    req.authenticate([{ thingspaceOauth: true, vZM2mToken: true }]);
    return req.callAsJson(dailyUsageResponseSchema, requestOptions);
  }

  /**
   * Retrieve all of the service plans, features and carriers associated with the account specified.
   *
   * @param accountName
   * @return Response from the API call
   */
  async servicePlanList(
    accountName: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccountDetails>> {
    const req = this.createRequest('GET');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ accountName: [accountName, string()] });
    req.appendTemplatePath`/v1/plans/${mapped.accountName}`;
    req.defaultToError(GIORestErrorResponseError, 'Error response');
    req.authenticate([{ thingspaceOauth: true, vZM2mToken: true }]);
    return req.callAsJson(accountDetailsSchema, requestOptions);
  }

  /**
   * Retrieve all of the service plans, features and carriers associated with the account specified.
   *
   * @param accountName
   * @return Response from the API call
   */
  async accountInformation(
    accountName: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccountDetails>> {
    const req = this.createRequest('GET');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ accountName: [accountName, string()] });
    req.appendTemplatePath`/v1/accounts/${mapped.accountName}`;
    req.defaultToError(GIORestErrorResponseError, 'Error response');
    req.authenticate([{ thingspaceOauth: true, vZM2mToken: true }]);
    return req.callAsJson(accountDetailsSchema, requestOptions);
  }

  /**
   * Allows the profile to fetch the complete device list. This works with Verizon US and Global profiles.
   *
   * @param body         Device Profile Query
   * @return Response from the API call
   */
  async retrieveTheGlobalDeviceList(
    body: GetDeviceListWithProfilesRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GIORequestResponse>> {
    const req = this.createRequest('POST', '/m2m/v2/devices/actions/list');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, getDeviceListWithProfilesRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(GIORestErrorResponseError, 'Error response');
    req.authenticate([{ thingspaceOauth: true, vZM2mToken: true }]);
    return req.callAsJson(gIORequestResponseSchema, requestOptions);
  }

  /**
   * Retrieve the provisioning history of a specific device or devices.
   *
   * @param body         Device Provisioning History
   * @return Response from the API call
   */
  async retrieveDeviceProvisioningHistory(
    body: ProvhistoryRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GIORequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v2/devices/history/actions/list'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ body: [body, provhistoryRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(GIORestErrorResponseError, 'Error response');
    req.authenticate([{ thingspaceOauth: true, vZM2mToken: true }]);
    return req.callAsJson(gIORequestResponseSchema, requestOptions);
  }

  /**
   * Get the status of an asynchronous request made with the Device Actions.
   *
   * @param accountName
   * @param requestID
   * @return Response from the API call
   */
  async getAsynchronousRequestStatus(
    accountName: string,
    requestID: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<StatusResponse>> {
    const req = this.createRequest('GET');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      requestID: [requestID, string()],
    });
    req.appendTemplatePath`/m2m/v2/accounts/${mapped.accountName}/requests/${mapped.requestID}/status`;
    req.defaultToError(GIORestErrorResponseError, 'Error response');
    req.authenticate([{ thingspaceOauth: true, vZM2mToken: true }]);
    return req.callAsJson(statusResponseSchema, requestOptions);
  }
}
