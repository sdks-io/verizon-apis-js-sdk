/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { FotaV2ResultError } from '../errors/fotaV2ResultError';
import {
  FotaV2SuccessResult,
  fotaV2SuccessResultSchema,
} from '../models/fotaV2SuccessResult';
import { V2LicenseIMEI, v2LicenseIMEISchema } from '../models/v2LicenseIMEI';
import {
  V2LicensesAssignedRemovedResult,
  v2LicensesAssignedRemovedResultSchema,
} from '../models/v2LicensesAssignedRemovedResult';
import {
  V2LicenseSummary,
  v2LicenseSummarySchema,
} from '../models/v2LicenseSummary';
import {
  V2ListOfLicensesToRemove,
  v2ListOfLicensesToRemoveSchema,
} from '../models/v2ListOfLicensesToRemove';
import {
  V2ListOfLicensesToRemoveRequest,
  v2ListOfLicensesToRemoveRequestSchema,
} from '../models/v2ListOfLicensesToRemoveRequest';
import {
  V2ListOfLicensesToRemoveResult,
  v2ListOfLicensesToRemoveResultSchema,
} from '../models/v2ListOfLicensesToRemoveResult';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class SoftwareManagementLicensesV2Controller extends BaseController {
  /**
   * The endpoint allows user to list license usage.
   *
   * @param account          Account identifier.
   * @param lastSeenDeviceId Last seen device identifier.
   * @return Response from the API call
   */
  async getAccountLicenseStatus(
    account: string,
    lastSeenDeviceId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V2LicenseSummary>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      lastSeenDeviceId: [lastSeenDeviceId, optional(string())],
    });
    req.query('lastSeenDeviceId', mapped.lastSeenDeviceId);
    req.appendTemplatePath`/licenses/${mapped.account}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(v2LicenseSummarySchema, requestOptions);
  }

  /**
   * This endpoint allows user to assign licenses to a list of devices.
   *
   * @param account      Account identifier.
   * @param body         License assignment.
   * @return Response from the API call
   * @deprecated
   */
  async assignLicensesToDevices(
    account: string,
    body: V2LicenseIMEI,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V2LicensesAssignedRemovedResult>> {
    const req = this.createRequest('POST');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      body: [body, v2LicenseIMEISchema],
    });
    req.header('Content-Type', '*/*');
    req.json(mapped.body);
    req.appendTemplatePath`/licenses/${mapped.account}/assign`;
    req.deprecated('SoftwareManagementLicensesV2Controller.assignLicensesToDevices');
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(
      v2LicensesAssignedRemovedResultSchema,
      requestOptions
    );
  }

  /**
   * This endpoint allows user to remove licenses from a list of devices.
   *
   * @param account      Account identifier.
   * @param body         License removal.
   * @return Response from the API call
   * @deprecated
   */
  async removeLicensesFromDevices(
    account: string,
    body: V2LicenseIMEI,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V2LicensesAssignedRemovedResult>> {
    const req = this.createRequest('POST');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      body: [body, v2LicenseIMEISchema],
    });
    req.header('Content-Type', '*/*');
    req.json(mapped.body);
    req.appendTemplatePath`/licenses/${mapped.account}/remove`;
    req.deprecated('SoftwareManagementLicensesV2Controller.removeLicensesFromDevices');
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(
      v2LicensesAssignedRemovedResultSchema,
      requestOptions
    );
  }

  /**
   * The license cancel endpoint allows user to list registered license cancellation candidate devices.
   *
   * @param account    Account identifier.
   * @param startIndex Start index to retrieve.
   * @return Response from the API call
   * @deprecated
   */
  async listLicensesToRemove(
    account: string,
    startIndex?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V2ListOfLicensesToRemove>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      startIndex: [startIndex, optional(string())],
    });
    req.query('startIndex', mapped.startIndex);
    req.appendTemplatePath`/licenses/${mapped.account}/cancel`;
    req.deprecated('SoftwareManagementLicensesV2Controller.listLicensesToRemove');
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(v2ListOfLicensesToRemoveSchema, requestOptions);
  }

  /**
   * The license cancel endpoint allows user to create a list of license cancellation candidate devices.
   *
   * @param account      Account identifier.
   * @param body         List of licensess to remove.
   * @return Response from the API call
   * @deprecated
   */
  async createListOfLicensesToRemove(
    account: string,
    body: V2ListOfLicensesToRemoveRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V2ListOfLicensesToRemoveResult>> {
    const req = this.createRequest('POST');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      body: [body, v2ListOfLicensesToRemoveRequestSchema],
    });
    req.header('Content-Type', '*/*');
    req.json(mapped.body);
    req.appendTemplatePath`/licenses/${mapped.account}/cancel`;
    req.deprecated('SoftwareManagementLicensesV2Controller.createListOfLicensesToRemove');
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(v2ListOfLicensesToRemoveResultSchema, requestOptions);
  }

  /**
   * This endpoint allows user to delete a created cancel candidate device list.
   *
   * @param account Account identifier.
   * @return Response from the API call
   * @deprecated
   */
  async deleteListOfLicensesToRemove(
    account: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FotaV2SuccessResult>> {
    const req = this.createRequest('DELETE');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({ account: [account, string()] });
    req.appendTemplatePath`/licenses/${mapped.account}/cancel`;
    req.deprecated('SoftwareManagementLicensesV2Controller.deleteListOfLicensesToRemove');
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(fotaV2SuccessResultSchema, requestOptions);
  }
}
