/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ChangeConfigurationRequest,
  changeConfigurationRequestSchema,
} from '../models/changeConfigurationRequest';
import {
  ChangeConfigurationResponse,
  changeConfigurationResponseSchema,
} from '../models/changeConfigurationResponse';
import {
  FindDeviceByPropertyResponseList,
  findDeviceByPropertyResponseListSchema,
} from '../models/findDeviceByPropertyResponseList';
import {
  QuerySubscriptionRequest,
  querySubscriptionRequestSchema,
} from '../models/querySubscriptionRequest';
import {
  RemoveDeviceRequest,
  removeDeviceRequestSchema,
} from '../models/removeDeviceRequest';
import {
  SearchDeviceByPropertyResponseList,
  searchDeviceByPropertyResponseListSchema,
} from '../models/searchDeviceByPropertyResponseList';
import {
  SearchDeviceEventHistoryRequest,
  searchDeviceEventHistoryRequestSchema,
} from '../models/searchDeviceEventHistoryRequest';
import {
  SearchDeviceEventHistoryResponseList,
  searchDeviceEventHistoryResponseListSchema,
} from '../models/searchDeviceEventHistoryResponseList';
import {
  SearchSensorHistoryRequest,
  searchSensorHistoryRequestSchema,
} from '../models/searchSensorHistoryRequest';
import {
  SearchSensorHistoryResponseList,
  searchSensorHistoryResponseListSchema,
} from '../models/searchSensorHistoryResponseList';
import { string } from '../schema';
import { BaseController } from './baseController';

export class CloudConnectorDevicesController extends BaseController {
  /**
   * Change configuration values on a device, such as setting how often a device records and reports
   * sensor readings.
   *
   * @param body         The request body changes configuration values on a
   *                                                          device.
   * @return Response from the API call
   */
  async updateDevicesConfigurationValue(
    body: ChangeConfigurationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ChangeConfigurationResponse>> {
    const req = this.createRequest(
      'POST',
      '/devices/configuration/actions/set'
    );
    req.baseUrl('Cloud Connector');
    const mapped = req.prepareArgs({
      body: [body, changeConfigurationRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(changeConfigurationResponseSchema, requestOptions);
  }

  /**
   * Find devices by property values. Returns an array of all matching device resources.
   *
   * @param body         The request body specifies fields and values to match.
   * @return Response from the API call
   */
  async findDeviceByPropertyValues(
    body: QuerySubscriptionRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FindDeviceByPropertyResponseList>> {
    const req = this.createRequest('POST', '/devices/actions/query');
    req.baseUrl('Cloud Connector');
    const mapped = req.prepareArgs({
      body: [body, querySubscriptionRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(
      findDeviceByPropertyResponseListSchema,
      requestOptions
    );
  }

  /**
   * Search for devices by property values. Returns an array of all matching device resources.
   *
   * @param body         The request body specifies fields and values to match.
   * @return Response from the API call
   */
  async searchDevicesResourcesByPropertyValues(
    body: QuerySubscriptionRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SearchDeviceByPropertyResponseList>> {
    const req = this.createRequest('POST', '/devices/actions/search');
    req.baseUrl('Cloud Connector');
    const mapped = req.prepareArgs({
      body: [body, querySubscriptionRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(
      searchDeviceByPropertyResponseListSchema,
      requestOptions
    );
  }

  /**
   * Search device event history to find events that match criteria.Sensor readings, configuration
   * changes, and other device data are all stored as events.
   *
   * @param body         The device identifier and fields to match in the
   *                                                               search.
   * @return Response from the API call
   */
  async searchDeviceEventHistory(
    body: SearchDeviceEventHistoryRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SearchDeviceEventHistoryResponseList>> {
    const req = this.createRequest(
      'POST',
      '/devices/fields/actions/history/search'
    );
    req.baseUrl('Cloud Connector');
    const mapped = req.prepareArgs({
      body: [body, searchDeviceEventHistoryRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.callAsJson(
      searchDeviceEventHistoryResponseListSchema,
      requestOptions
    );
  }

  /**
   * Returns the readings of a specified sensor, with the most recent reading first. Sensor readings are
   * stored as events; this request an array of events.
   *
   * @param fieldname    The name of the sensor.
   * @param body         The device identifier and fields to match in the search.
   * @return Response from the API call
   */
  async searchSensorReadings(
    fieldname: string,
    body: SearchSensorHistoryRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SearchSensorHistoryResponseList>> {
    const req = this.createRequest('POST');
    req.baseUrl('Cloud Connector');
    const mapped = req.prepareArgs({
      fieldname: [fieldname, string()],
      body: [body, searchSensorHistoryRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/devices/fields/${mapped.fieldname}/actions/history`;
    return req.callAsJson(
      searchSensorHistoryResponseListSchema,
      requestOptions
    );
  }

  /**
   * Remove a device from a ThingSpace account.
   *
   * @param body         The request body identifies the device to delete.
   * @return Response from the API call
   */
  async deleteDeviceFromAccount(
    body: RemoveDeviceRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST', '/devices/actions/delete');
    req.baseUrl('Cloud Connector');
    const mapped = req.prepareArgs({ body: [body, removeDeviceRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    return req.call(requestOptions);
  }
}
