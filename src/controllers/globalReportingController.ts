/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ESIMRestErrorResponseError,
} from '../errors/eSIMRestErrorResponseError';
import {
  ESIMProvhistoryRequest,
  eSIMProvhistoryRequestSchema,
} from '../models/eSIMProvhistoryRequest';
import {
  ESIMRequestResponse,
  eSIMRequestResponseSchema,
} from '../models/eSIMRequestResponse';
import {
  ESIMStatusResponse,
  eSIMStatusResponseSchema,
} from '../models/eSIMStatusResponse';
import { string } from '../schema';
import { BaseController } from './baseController';

export class GlobalReportingController extends BaseController {
  /**
   * Retreive the provisioning history of a specific device or devices.
   *
   * @param body         Device Provisioning History
   * @return Response from the API call
   */
  async deviceprovhistoryUsingPOST(
    body: ESIMProvhistoryRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ESIMRequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v2/devices/history/actions/list'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, eSIMProvhistoryRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ESIMRestErrorResponseError, 'Bad request');
    req.throwOn(401, ESIMRestErrorResponseError, 'Unauthorized');
    req.throwOn(403, ESIMRestErrorResponseError, 'Forbidden');
    req.throwOn(404, ESIMRestErrorResponseError, 'Not Found / Does not exist');
    req.throwOn(406, ESIMRestErrorResponseError, 'Format / Request Unacceptable');
    req.throwOn(429, ESIMRestErrorResponseError, 'Too many requests');
    req.defaultToError(ESIMRestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(eSIMRequestResponseSchema, requestOptions);
  }

  /**
   * Get the status of a request made with the Device Actions.
   *
   * @param accountname
   * @param requestID
   * @return Response from the API call
   */
  async requeststatususingGET(
    accountname: string,
    requestID: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ESIMStatusResponse>> {
    const req = this.createRequest('GET');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      accountname: [accountname, string()],
      requestID: [requestID, string()],
    });
    req.appendTemplatePath`/m2m/v2/accounts/${mapped.accountname}/requests/${mapped.requestID}/status`;
    req.throwOn(400, ESIMRestErrorResponseError, 'Bad request');
    req.throwOn(401, ESIMRestErrorResponseError, 'Unauthorized');
    req.throwOn(403, ESIMRestErrorResponseError, 'Forbidden');
    req.throwOn(404, ESIMRestErrorResponseError, 'Not Found / Does not exist');
    req.throwOn(406, ESIMRestErrorResponseError, 'Format / Request Unacceptable');
    req.throwOn(429, ESIMRestErrorResponseError, 'Too many requests');
    req.defaultToError(ESIMRestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(eSIMStatusResponseSchema, requestOptions);
  }
}
