/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ESIMGlobalDeviceList,
  eSIMGlobalDeviceListSchema,
} from '../models/eSIMGlobalDeviceList';
import {
  ESIMProvhistoryRequest,
  eSIMProvhistoryRequestSchema,
} from '../models/eSIMProvhistoryRequest';
import {
  ESIMRequestResponse,
  eSIMRequestResponseSchema,
} from '../models/eSIMRequestResponse';
import { BaseController } from './baseController';
import { ESIMRestErrorResponseError } from '../errors/eSIMRestErrorResponseError';

export class GlobalReportingController extends BaseController {
  /**
   * Retrieve the provisioning history of a specific device or devices.
   *
   * @param body         Device Provisioning History
   * @return Response from the API call
   */
  async deviceprovhistoryUsingPOST(
    body: ESIMProvhistoryRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ESIMRequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v2/devices/history/actions/list'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, eSIMProvhistoryRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ESIMRestErrorResponseError, 'Bad request');
    req.throwOn(401, ESIMRestErrorResponseError, 'Unauthorized');
    req.throwOn(403, ESIMRestErrorResponseError, 'Forbidden');
    req.throwOn(404, ESIMRestErrorResponseError, 'Not Found / Does not exist');
    req.throwOn(
      406,
      ESIMRestErrorResponseError,
      'Format / Request Unacceptable'
    );
    req.throwOn(429, ESIMRestErrorResponseError, 'Too many requests');
    req.defaultToError(ESIMRestErrorResponseError, 'Error response');
    req.authenticate([{ thingspaceOauth: true, vZM2mToken: true }]);
    return req.callAsJson(eSIMRequestResponseSchema, requestOptions);
  }

  /**
   * Retrieve a list of all devices associated with an account.
   *
   * @param body         Device List
   * @return Response from the API call
   */
  async retrieveGlobalList(
    body: ESIMGlobalDeviceList,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ESIMRequestResponse>> {
    const req = this.createRequest('POST', '/m2m/v2/devices/actions/list');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, eSIMGlobalDeviceListSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ESIMRestErrorResponseError, 'Bad request');
    req.throwOn(401, ESIMRestErrorResponseError, 'Unauthorized');
    req.throwOn(403, ESIMRestErrorResponseError, 'Forbidden');
    req.throwOn(404, ESIMRestErrorResponseError, 'Not Found / Does not exist');
    req.throwOn(
      406,
      ESIMRestErrorResponseError,
      'Format / Request Unacceptable'
    );
    req.throwOn(429, ESIMRestErrorResponseError, 'Too many requests');
    req.defaultToError(ESIMRestErrorResponseError, 'Error response');
    req.authenticate([{ thingspaceOauth: true, vZM2mToken: true }]);
    return req.callAsJson(eSIMRequestResponseSchema, requestOptions);
  }
}
