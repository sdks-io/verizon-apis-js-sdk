/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { IntelligenceResultError } from '../errors/intelligenceResultError';
import {
  AnomalyDetectionTrigger,
  anomalyDetectionTriggerSchema,
} from '../models/anomalyDetectionTrigger';
import {
  AnomalyTriggerResult,
  anomalyTriggerResultSchema,
} from '../models/anomalyTriggerResult';
import {
  CreateTriggerRequestOptions,
  createTriggerRequestOptionsSchema,
} from '../models/createTriggerRequestOptions';
import {
  IntelligenceSuccessResult,
  intelligenceSuccessResultSchema,
} from '../models/intelligenceSuccessResult';
import {
  UpdateTriggerRequestOptions,
  updateTriggerRequestOptionsSchema,
} from '../models/updateTriggerRequestOptions';
import { array, string } from '../schema';
import { BaseController } from './baseController';

export class AnomalyTriggersV2Controller extends BaseController {
  /**
   * Creates the trigger to identify an anomaly.
   *
   * @param body         Request to create an anomaly trigger.
   * @return Response from the API call
   */
  async createAnomalyDetectionTriggerV2(
    body: CreateTriggerRequestOptions[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AnomalyDetectionTrigger>> {
    const req = this.createRequest('POST', '/m2m/v2/triggers');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, array(createTriggerRequestOptionsSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(IntelligenceResultError, 'An error occurred.');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(anomalyDetectionTriggerSchema, requestOptions);
  }

  /**
   * Updates an existing trigger using the account name.
   *
   * @param body         Request to update existing trigger.
   * @return Response from the API call
   */
  async updateAnomalyDetectionTriggerV2(
    body: UpdateTriggerRequestOptions[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<IntelligenceSuccessResult>> {
    const req = this.createRequest('PUT', '/m2m/v2/triggers');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, array(updateTriggerRequestOptionsSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(IntelligenceResultError, 'An error occurred.');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(intelligenceSuccessResultSchema, requestOptions);
  }

  /**
   * Retrieves the values for a specific trigger ID.
   *
   * @param triggerId The trigger ID of a specific trigger.
   * @return Response from the API call
   */
  async listAnomalyDetectionTriggerSettingsV2(
    triggerId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AnomalyTriggerResult>> {
    const req = this.createRequest('GET');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ triggerId: [triggerId, string()] });
    req.appendTemplatePath`/m2m/v2/triggers/${mapped.triggerId}`;
    req.defaultToError(IntelligenceResultError, 'An error occurred.');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(anomalyTriggerResultSchema, requestOptions);
  }
}
