/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { DeviceLocationResultError } from '../errors/deviceLocationResultError';
import {
  AsynchronousLocationRequestResult,
  asynchronousLocationRequestResultSchema,
} from '../models/asynchronousLocationRequestResult';
import { Location, locationSchema } from '../models/location';
import { LocationReport, locationReportSchema } from '../models/locationReport';
import {
  LocationReportStatus,
  locationReportStatusSchema,
} from '../models/locationReportStatus';
import {
  LocationRequest,
  locationRequestSchema,
} from '../models/locationRequest';
import {
  SynchronousLocationRequestResult,
  synchronousLocationRequestResultSchema,
} from '../models/synchronousLocationRequestResult';
import { TransactionID, transactionIDSchema } from '../models/transactionID';
import { array, number, string } from '../schema';
import { BaseController } from './baseController';

export class DevicesLocationsController extends BaseController {
  /**
   * This locations endpoint retrieves the locations for a list of devices.
   *
   * @param body         Request to obtain location of devices.
   * @return Response from the API call
   */
  async listDevicesLocationsSynchronous(
    body: LocationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Location[]>> {
    const req = this.createRequest('POST', '/locations');
    req.baseUrl('Device Location');
    const mapped = req.prepareArgs({ body: [body, locationRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(DeviceLocationResultError, 'Unexpected error.');
    return req.callAsJson(array(locationSchema), requestOptions);
  }

  /**
   * Requests the current or cached location of up to 10,000 IoT or consumer devices (phones, tablets.
   * etc.). This request returns a synchronous transaction ID, and the location information for each
   * device is returned asynchronously as a DeviceLocation callback message.
   *
   * @param body         An asynchronous request to obtain locations of devices.
   * @return Response from the API call
   */
  async listDevicesLocationsAsynchronous(
    body: LocationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SynchronousLocationRequestResult>> {
    const req = this.createRequest('POST', '/devicelocations');
    req.baseUrl('Device Location');
    const mapped = req.prepareArgs({ body: [body, locationRequestSchema] });
    req.header('Content-Type', '*/*');
    req.json(mapped.body);
    req.defaultToError(DeviceLocationResultError, 'Unexpected error.');
    return req.callAsJson(
      synchronousLocationRequestResultSchema,
      requestOptions
    );
  }

  /**
   * Cancel a queued or unfinished device location request.
   *
   * @param accountName Account identifier in "##########-#####".
   * @param txid        Transaction ID of the request to cancel, from the synchronous response to the
   *                              original request.
   * @return Response from the API call
   */
  async cancelDeviceLocationRequest(
    accountName: string,
    txid: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TransactionID>> {
    const req = this.createRequest('DELETE');
    req.baseUrl('Device Location');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      txid: [txid, string()],
    });
    req.query('accountName', mapped.accountName);
    req.appendTemplatePath`/devicelocations/${mapped.txid}`;
    req.defaultToError(DeviceLocationResultError, 'Unexpected error.');
    return req.callAsJson(transactionIDSchema, requestOptions);
  }

  /**
   * Request an asynchronous device location report.
   *
   * @param body         Request for device location report.
   * @return Response from the API call
   */
  async createLocationReport(
    body: LocationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AsynchronousLocationRequestResult>> {
    const req = this.createRequest('POST', '/locationreports');
    req.baseUrl('Device Location');
    const mapped = req.prepareArgs({ body: [body, locationRequestSchema] });
    req.header('Content-Type', '*/*');
    req.json(mapped.body);
    req.defaultToError(DeviceLocationResultError, 'Unexpected error.');
    return req.callAsJson(
      asynchronousLocationRequestResultSchema,
      requestOptions
    );
  }

  /**
   * Download a completed asynchronous device location report.
   *
   * @param account    Account identifier in "##########-#####".
   * @param txid       Transaction ID from POST /locationreports response.
   * @param startindex Zero-based number of the first record to return.
   * @return Response from the API call
   */
  async retrieveLocationReport(
    account: string,
    txid: string,
    startindex: number,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LocationReport>> {
    const req = this.createRequest('GET');
    req.baseUrl('Device Location');
    const mapped = req.prepareArgs({
      account: [account, string()],
      txid: [txid, string()],
      startindex: [startindex, number()],
    });
    req.appendTemplatePath`/locationreports/${mapped.account}/report/${mapped.txid}/index/${mapped.startindex}`;
    req.defaultToError(DeviceLocationResultError, 'Unexpected error.');
    return req.callAsJson(locationReportSchema, requestOptions);
  }

  /**
   * Returns the current status of a requested device location report.
   *
   * @param account Account identifier in "##########-#####".
   * @param txid    Transaction ID of the report.
   * @return Response from the API call
   */
  async getLocationReportStatus(
    account: string,
    txid: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<LocationReportStatus>> {
    const req = this.createRequest('GET');
    req.baseUrl('Device Location');
    const mapped = req.prepareArgs({
      account: [account, string()],
      txid: [txid, string()],
    });
    req.appendTemplatePath`/locationreports/${mapped.account}/report/${mapped.txid}/status`;
    req.defaultToError(DeviceLocationResultError, 'Unexpected error.');
    return req.callAsJson(locationReportStatusSchema, requestOptions);
  }

  /**
   * Cancel a queued device location report.
   *
   * @param account Account identifier in "##########-#####".
   * @param txid    Transaction ID of the report to cancel.
   * @return Response from the API call
   */
  async cancelQueuedLocationReportGeneration(
    account: string,
    txid: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TransactionID>> {
    const req = this.createRequest('DELETE');
    req.baseUrl('Device Location');
    const mapped = req.prepareArgs({
      account: [account, string()],
      txid: [txid, string()],
    });
    req.appendTemplatePath`/locationreports/${mapped.account}/report/${mapped.txid}`;
    req.defaultToError(DeviceLocationResultError, 'Unexpected error.');
    return req.callAsJson(transactionIDSchema, requestOptions);
  }
}
