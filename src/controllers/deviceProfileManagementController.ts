/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { RestErrorResponseError } from '../errors/restErrorResponseError';
import {
  ActivateDeviceProfileRequest,
  activateDeviceProfileRequestSchema,
} from '../models/activateDeviceProfileRequest';
import { ProfileRequest, profileRequestSchema } from '../models/profileRequest';
import {
  ProfileRequest2,
  profileRequest2Schema,
} from '../models/profileRequest2';
import {
  RequestResponse,
  requestResponseSchema,
} from '../models/requestResponse';
import {
  SetFallbackAttributeRequest,
  setFallbackAttributeRequestSchema,
} from '../models/setFallbackAttributeRequest';
import { BaseController } from './baseController';

export class DeviceProfileManagementController extends BaseController {
  /**
   * Uses the profile to bring the device under management.
   *
   * @param body         Device Profile Query
   * @return Response from the API call
   */
  async activateDeviceThroughProfile(
    body: ActivateDeviceProfileRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/v1/devices/profile/actions/activate_enable'
    );
    req.baseUrl('M2M');
    const mapped = req.prepareArgs({
      body: [body, activateDeviceProfileRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, RestErrorResponseError, 'Bad request');
    return req.callAsJson(requestResponseSchema, requestOptions);
  }

  /**
   * Uses the profile to activate the device.
   *
   * @param body         Device Profile Query
   * @return Response from the API call
   */
  async profileToActivateDevice(
    body: ProfileRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/v1/devices/profile/actions/activate'
    );
    req.baseUrl('M2M');
    const mapped = req.prepareArgs({ body: [body, profileRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, RestErrorResponseError, 'Bad request');
    return req.callAsJson(requestResponseSchema, requestOptions);
  }

  /**
   * Uses the profile to deactivate the device.
   *
   * @param body         Device Profile Query
   * @return Response from the API call
   */
  async profileToDeactivateDevice(
    body: ProfileRequest2,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/v1/devices/profile/actions/deactivate'
    );
    req.baseUrl('M2M');
    const mapped = req.prepareArgs({ body: [body, profileRequest2Schema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, RestErrorResponseError, 'Bad request');
    return req.callAsJson(requestResponseSchema, requestOptions);
  }

  /**
   * Allows the profile to set the fallback attribute to the device.
   *
   * @param body         Device Profile Query
   * @return Response from the API call
   */
  async profileToSetFallbackAttribute(
    body: SetFallbackAttributeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/v1/devices/profile/actions/setfallbackattribute'
    );
    req.baseUrl('M2M');
    const mapped = req.prepareArgs({
      body: [body, setFallbackAttributeRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, RestErrorResponseError, 'Bad request');
    return req.callAsJson(requestResponseSchema, requestOptions);
  }
}
