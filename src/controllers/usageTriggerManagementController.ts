/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { DeviceLocationResultError } from '../errors/deviceLocationResultError';
import {
  DeviceLocationSuccessResult,
  deviceLocationSuccessResultSchema,
} from '../models/deviceLocationSuccessResult';
import {
  UsageTriggerAddRequest,
  usageTriggerAddRequestSchema,
} from '../models/usageTriggerAddRequest';
import {
  UsageTriggerResponse,
  usageTriggerResponseSchema,
} from '../models/usageTriggerResponse';
import {
  UsageTriggerUpdateRequest,
  usageTriggerUpdateRequestSchema,
} from '../models/usageTriggerUpdateRequest';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class UsageTriggerManagementController extends BaseController {
  /**
   * Create a new usage trigger, which will send an alert when the number of device location service
   * transactions reaches a specified percentage of the monthly subscription amount.
   *
   *
   * @param body         License assignment.
   * @return Response from the API call
   */
  async createNewTrigger(
    body?: UsageTriggerAddRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UsageTriggerResponse>> {
    const req = this.createRequest('POST', '/usage/triggers');
    req.baseUrl('Subscription Server');
    const mapped = req.prepareArgs({
      body: [body, optional(usageTriggerAddRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, DeviceLocationResultError, 'Unexpected error');
    return req.callAsJson(usageTriggerResponseSchema, requestOptions);
  }

  /**
   * Update an existing usage trigger
   *
   *
   * @param triggerId    Usage trigger ID
   * @param body         New trigger values
   * @return Response from the API call
   */
  async updateTrigger(
    triggerId: string,
    body?: UsageTriggerUpdateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UsageTriggerResponse>> {
    const req = this.createRequest('POST');
    req.baseUrl('Subscription Server');
    const mapped = req.prepareArgs({
      triggerId: [triggerId, string()],
      body: [body, optional(usageTriggerUpdateRequestSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/usage/triggers/${mapped.triggerId}`;
    req.throwOn(400, DeviceLocationResultError, 'Unexpected error');
    return req.callAsJson(usageTriggerResponseSchema, requestOptions);
  }

  /**
   * eletes the specified usage trigger from the given account
   *
   * @param accountName Account name
   * @param triggerId   Usage trigger ID
   * @return Response from the API call
   */
  async deleteTrigger(
    accountName: string,
    triggerId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceLocationSuccessResult>> {
    const req = this.createRequest('DELETE');
    req.baseUrl('Subscription Server');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      triggerId: [triggerId, string()],
    });
    req.appendTemplatePath`/usage/accounts/${mapped.accountName}/triggers/${mapped.triggerId}`;
    req.throwOn(400, DeviceLocationResultError, 'Unexpected error');
    return req.callAsJson(deviceLocationSuccessResultSchema, requestOptions);
  }
}
