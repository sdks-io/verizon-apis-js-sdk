/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { FotaV2ResultError } from '../errors/fotaV2ResultError';
import {
  CampaignSoftware,
  campaignSoftwareSchema,
} from '../models/campaignSoftware';
import {
  CampaignSoftwareUpgrade,
  campaignSoftwareUpgradeSchema,
} from '../models/campaignSoftwareUpgrade';
import {
  FotaV2SuccessResult,
  fotaV2SuccessResultSchema,
} from '../models/fotaV2SuccessResult';
import {
  SchedulesSoftwareUpgradeRequest,
  schedulesSoftwareUpgradeRequestSchema,
} from '../models/schedulesSoftwareUpgradeRequest';
import {
  UploadAndScheduleFileRequest,
  uploadAndScheduleFileRequestSchema,
} from '../models/uploadAndScheduleFileRequest';
import {
  UploadAndScheduleFileResponse,
  uploadAndScheduleFileResponseSchema,
} from '../models/uploadAndScheduleFileResponse';
import {
  V2AddOrRemoveDeviceRequest,
  v2AddOrRemoveDeviceRequestSchema,
} from '../models/v2AddOrRemoveDeviceRequest';
import {
  V2AddOrRemoveDeviceResult,
  v2AddOrRemoveDeviceResultSchema,
} from '../models/v2AddOrRemoveDeviceResult';
import {
  V2ChangeCampaignDatesRequest,
  v2ChangeCampaignDatesRequestSchema,
} from '../models/v2ChangeCampaignDatesRequest';
import { string } from '../schema';
import { BaseController } from './baseController';

export class CampaignsV2Controller extends BaseController {
  /**
   * This endpoint allows user to schedule a software upgrade.
   *
   * @param account      Account identifier.
   * @param body         Software upgrade information.
   * @return Response from the API call
   */
  async scheduleCampaignFirmwareUpgrade(
    account: string,
    body: CampaignSoftwareUpgrade,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CampaignSoftware>> {
    const req = this.createRequest('POST');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      body: [body, campaignSoftwareUpgradeSchema],
    });
    req.header('Content-Type', '*/*');
    req.json(mapped.body);
    req.appendTemplatePath`/campaigns/${mapped.account}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(campaignSoftwareSchema, requestOptions);
  }

  /**
   * This endpoint allows user to get information of a software upgrade.
   *
   * @param account    Account identifier.
   * @param campaignId Software upgrade identifier.
   * @return Response from the API call
   */
  async getCampaignInformation(
    account: string,
    campaignId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CampaignSoftware>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      campaignId: [campaignId, string()],
    });
    req.appendTemplatePath`/campaigns/${mapped.account}/${mapped.campaignId}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(campaignSoftwareSchema, requestOptions);
  }

  /**
   * This endpoint allows user to Add or Remove devices to an existing software upgrade.
   *
   * @param account      Account identifier.
   * @param campaignId   Software upgrade information.
   * @param body         Request to add or remove device to existing software
   *                                                          upgrade information.
   * @return Response from the API call
   */
  async updateCampaignFirmwareDevices(
    account: string,
    campaignId: string,
    body: V2AddOrRemoveDeviceRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V2AddOrRemoveDeviceResult>> {
    const req = this.createRequest('PUT');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      campaignId: [campaignId, string()],
      body: [body, v2AddOrRemoveDeviceRequestSchema],
    });
    req.header('Content-Type', '*/*');
    req.json(mapped.body);
    req.appendTemplatePath`/campaigns/${mapped.account}/${mapped.campaignId}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(v2AddOrRemoveDeviceResultSchema, requestOptions);
  }

  /**
   * This endpoint allows user to cancel software upgrade. A software upgrade already started can not be
   * cancelled.
   *
   * @param account    Account identifier.
   * @param campaignId Unique identifier of campaign.
   * @return Response from the API call
   */
  async cancelCampaign(
    account: string,
    campaignId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FotaV2SuccessResult>> {
    const req = this.createRequest('DELETE');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      campaignId: [campaignId, string()],
    });
    req.appendTemplatePath`/campaigns/${mapped.account}/${mapped.campaignId}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(fotaV2SuccessResultSchema, requestOptions);
  }

  /**
   * This endpoint allows user to change campaign dates and time windows. Fields which need to remain
   * unchanged should be also provided.
   *
   * @param account      Account identifier.
   * @param campaignId   Software upgrade information.
   * @param body         New dates and time windows.
   * @return Response from the API call
   */
  async updateCampaignDates(
    account: string,
    campaignId: string,
    body: V2ChangeCampaignDatesRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CampaignSoftware>> {
    const req = this.createRequest('PUT');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      campaignId: [campaignId, string()],
      body: [body, v2ChangeCampaignDatesRequestSchema],
    });
    req.header('Content-Type', '*/*');
    req.json(mapped.body);
    req.appendTemplatePath`/campaigns/${mapped.account}/${mapped.campaignId}/dates`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(campaignSoftwareSchema, requestOptions);
  }

  /**
   * You can upload configuration files and schedule them in a campaign to devices.
   *
   * @param acc          Account identifier.
   * @param body         Device logging information.
   * @return Response from the API call
   */
  async scheduleFileUpgrade(
    acc: string,
    body: UploadAndScheduleFileRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UploadAndScheduleFileResponse>> {
    const req = this.createRequest('POST');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      acc: [acc, string()],
      body: [body, uploadAndScheduleFileRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/campaigns/files/${mapped.acc}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(uploadAndScheduleFileResponseSchema, requestOptions);
  }

  /**
   * Campaign time windows for downloading and installing software are available as long as the device
   * OEM supports this.
   *
   * @param acc          Account identifier.
   * @param body         Device logging information.
   * @return Response from the API call
   */
  async scheduleSWUpgradeHttpDevices(
    acc: string,
    body: SchedulesSoftwareUpgradeRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UploadAndScheduleFileResponse>> {
    const req = this.createRequest('POST');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      acc: [acc, string()],
      body: [body, schedulesSoftwareUpgradeRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/campaigns/software/${mapped.acc}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(uploadAndScheduleFileResponseSchema, requestOptions);
  }
}
