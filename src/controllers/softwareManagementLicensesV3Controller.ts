/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { FotaV3ResultError } from '../errors/fotaV3ResultError';
import {
  V3LicenseAssignedRemovedResult,
  v3LicenseAssignedRemovedResultSchema,
} from '../models/v3LicenseAssignedRemovedResult';
import { V3LicenseIMEI, v3LicenseIMEISchema } from '../models/v3LicenseIMEI';
import {
  V3LicenseSummary,
  v3LicenseSummarySchema,
} from '../models/v3LicenseSummary';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class SoftwareManagementLicensesV3Controller extends BaseController {
  /**
   * The endpoint allows user to list license usage.
   *
   * @param acc              Account identifier.
   * @param lastSeenDeviceId Last seen device identifier.
   * @return Response from the API call
   */
  async getAccountLicensesStatus(
    acc: string,
    lastSeenDeviceId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3LicenseSummary>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V3');
    const mapped = req.prepareArgs({
      acc: [acc, string()],
      lastSeenDeviceId: [lastSeenDeviceId, optional(string())],
    });
    req.query('lastSeenDeviceId', mapped.lastSeenDeviceId);
    req.appendTemplatePath`/licenses/${mapped.acc}`;
    req.throwOn(400, FotaV3ResultError, 'Unexpected error.');
    return req.callAsJson(v3LicenseSummarySchema, requestOptions);
  }

  /**
   * This endpoint allows user to assign licenses to a list of devices.
   *
   * @param acc          Account identifier.
   * @param body         License assignment.
   * @return Response from the API call
   */
  async assignLicensesToDevices(
    acc: string,
    body: V3LicenseIMEI,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3LicenseAssignedRemovedResult>> {
    const req = this.createRequest('POST');
    req.baseUrl('Software Management V3');
    const mapped = req.prepareArgs({
      acc: [acc, string()],
      body: [body, v3LicenseIMEISchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/licenses/${mapped.acc}/assign`;
    req.throwOn(400, FotaV3ResultError, 'Unexpected error.');
    return req.callAsJson(v3LicenseAssignedRemovedResultSchema, requestOptions);
  }

  /**
   * This endpoint allows user to remove licenses from a list of devices.
   *
   * @param acc          Account identifier.
   * @param body         License removal.
   * @return Response from the API call
   */
  async removeLicensesFromDevices(
    acc: string,
    body: V3LicenseIMEI,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3LicenseAssignedRemovedResult>> {
    const req = this.createRequest('POST');
    req.baseUrl('Software Management V3');
    const mapped = req.prepareArgs({
      acc: [acc, string()],
      body: [body, v3LicenseIMEISchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/licenses/${mapped.acc}/remove`;
    req.throwOn(400, FotaV3ResultError, 'Unexpected error.');
    return req.callAsJson(v3LicenseAssignedRemovedResultSchema, requestOptions);
  }
}
