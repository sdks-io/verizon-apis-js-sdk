/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { GIORestErrorResponseError } from '../errors/gIORestErrorResponseError';
import {
  DeviceProfileRequest,
  deviceProfileRequestSchema,
} from '../models/deviceProfileRequest';
import {
  GIODeactivateDeviceProfileRequest,
  gIODeactivateDeviceProfileRequestSchema,
} from '../models/gIODeactivateDeviceProfileRequest';
import {
  GIOProfileRequest,
  gIOProfileRequestSchema,
} from '../models/gIOProfileRequest';
import {
  GIORequestResponse,
  gIORequestResponseSchema,
} from '../models/gIORequestResponse';
import { BaseController } from './baseController';

export class ManagingESIMProfilesController extends BaseController {
  /**
   * Activate a device with either a lead or local profile.
   *
   * @param body         Device Profile Query
   * @return Response from the API call
   */
  async activateADeviceProfile(
    body: GIOProfileRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GIORequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v1/devices/profile/actions/activate'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ body: [body, gIOProfileRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(GIORestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(gIORequestResponseSchema, requestOptions);
  }

  /**
   * Enable a device lead or local profile.
   *
   * @param body         Device Profile Query
   * @return Response from the API call
   */
  async enableADeviceProfile(
    body: DeviceProfileRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GIORequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v1/devices/profile/actions/enable'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, deviceProfileRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(GIORestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(gIORequestResponseSchema, requestOptions);
  }

  /**
   * Deactivate the lead or local profile. **Note:** to reactivate the profile, use the **Activate**
   * endpoint above.
   *
   * @param body         Device Profile Query
   * @return Response from the API call
   */
  async deactivateADeviceProfile(
    body: GIODeactivateDeviceProfileRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GIORequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v1/devices/profile/actions/deactivate'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, gIODeactivateDeviceProfileRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(GIORestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(gIORequestResponseSchema, requestOptions);
  }

  /**
   * Enable the Global IoT Orchestration device profile for download.
   *
   * @param body         Device Profile Query
   * @return Response from the API call
   */
  async enableADeviceProfileForDownload(
    body: DeviceProfileRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GIORequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v1/devices/profile/actions/download_enable'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, deviceProfileRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(GIORestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(gIORequestResponseSchema, requestOptions);
  }

  /**
   * Download a Global IoT Orchestration device profile.
   *
   * @param body         Device Profile Query
   * @return Response from the API call
   */
  async downloadADeviceProfile(
    body: DeviceProfileRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GIORequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v1/devices/profile/actions/download'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, deviceProfileRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(GIORestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(gIORequestResponseSchema, requestOptions);
  }

  /**
   * Delete a device profile for Global IoT Orchestration. **Note:** the profile must be deactivated
   * first!
   *
   * @param body         Device Profile Query
   * @return Response from the API call
   */
  async deleteADeviceProfile(
    body: DeviceProfileRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GIORequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v1/devices/profile/actions/delete'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, deviceProfileRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(GIORestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(gIORequestResponseSchema, requestOptions);
  }
}
