/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ReadySimRestErrorResponseError,
} from '../errors/readySimRestErrorResponseError';
import {
  TriggerValueResponse,
  triggerValueResponseSchema,
} from '../models/triggerValueResponse';
import {
  TriggerValueResponse2,
  triggerValueResponse2Schema,
} from '../models/triggerValueResponse2';
import { string } from '../schema';
import { BaseController } from './baseController';

export class RetrieveTheTriggersController extends BaseController {
  /**
   * Retrieves all of the available triggers for pseudo-MDN.
   *
   * @return Response from the API call
   */
  async getAllAvailableTriggers(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TriggerValueResponse>> {
    const req = this.createRequest('GET', '/m2m/v2/triggers');
    req.baseUrl('Thingspace');
    req.defaultToError(ReadySimRestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(triggerValueResponseSchema, requestOptions);
  }

  /**
   * Retrieve the triggers associated with an account name.
   *
   * @param accountName The account name
   * @return Response from the API call
   */
  async getAllTriggersByAccountName(
    accountName: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TriggerValueResponse>> {
    const req = this.createRequest('GET');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ accountName: [accountName, string()] });
    req.appendTemplatePath`/m2m/v2/triggers/accounts/${mapped.accountName}`;
    req.defaultToError(ReadySimRestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(triggerValueResponseSchema, requestOptions);
  }

  /**
   * Retrieves all of the triggers for the specified account associated with the PromoAlert category
   *
   * @return Response from the API call
   */
  async getAllTriggersByTriggerCategory(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TriggerValueResponse2>> {
    const req = this.createRequest(
      'GET',
      '/m2m/v2/triggers/categories/PromoAlerts'
    );
    req.baseUrl('Thingspace');
    req.defaultToError(ReadySimRestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(triggerValueResponse2Schema, requestOptions);
  }

  /**
   * Retrives a specific trigger by its ID.
   *
   * @param triggerId The ID of a specific trigger
   * @return Response from the API call
   */
  async getTriggersById(
    triggerId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<TriggerValueResponse2>> {
    const req = this.createRequest('GET');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ triggerId: [triggerId, string()] });
    req.appendTemplatePath`/m2m/v2/triggers/${mapped.triggerId}`;
    req.defaultToError(ReadySimRestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(triggerValueResponse2Schema, requestOptions);
  }
}
