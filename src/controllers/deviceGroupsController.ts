/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ConnectivityManagementResultError,
} from '../errors/connectivityManagementResultError';
import {
  ConnectivityManagementSuccessResult,
  connectivityManagementSuccessResultSchema,
} from '../models/connectivityManagementSuccessResult';
import {
  CreateDeviceGroupRequest,
  createDeviceGroupRequestSchema,
} from '../models/createDeviceGroupRequest';
import { DeviceGroup, deviceGroupSchema } from '../models/deviceGroup';
import {
  DeviceGroupDevicesData,
  deviceGroupDevicesDataSchema,
} from '../models/deviceGroupDevicesData';
import {
  DeviceGroupUpdateRequest,
  deviceGroupUpdateRequestSchema,
} from '../models/deviceGroupUpdateRequest';
import { array, bigint, optional, string } from '../schema';
import { BaseController } from './baseController';

export class DeviceGroupsController extends BaseController {
  /**
   * Create a new device group and optionally add devices to the group. Device groups can make it easier
   * to manage similar devices and to get reports on their usage.
   *
   * @param body         A request to create a new device group.
   * @return Response from the API call
   */
  async createDeviceGroup(
    body: CreateDeviceGroupRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConnectivityManagementSuccessResult>> {
    const req = this.createRequest('POST', '/v1/groups');
    req.baseUrl('M2M');
    const mapped = req.prepareArgs({
      body: [body, createDeviceGroupRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ConnectivityManagementResultError, 'Error response.');
    return req.callAsJson(
      connectivityManagementSuccessResultSchema,
      requestOptions
    );
  }

  /**
   * Returns a list of all device groups in a specified account.
   *
   * @param aname Account name.
   * @return Response from the API call
   */
  async listDeviceGroups(
    aname: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceGroup[]>> {
    const req = this.createRequest('GET');
    req.baseUrl('M2M');
    const mapped = req.prepareArgs({ aname: [aname, string()] });
    req.appendTemplatePath`/v1/groups/${mapped.aname}`;
    req.throwOn(400, ConnectivityManagementResultError, 'Error response.');
    return req.callAsJson(array(deviceGroupSchema), requestOptions);
  }

  /**
   * When HTTP status is 202, a URL will be returned in the Location header of the form
   * /groups/{aname}/name/{gname}/?next={token}. This URL can be used to request the next set of groups.
   *
   * @param aname Account name.
   * @param gname Group name.
   * @param next  Continue the previous query from the pageUrl pagetoken.
   * @return Response from the API call
   */
  async getDeviceGroupInformation(
    aname: string,
    gname: string,
    next?: bigint,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceGroupDevicesData>> {
    const req = this.createRequest('GET');
    req.baseUrl('M2M');
    const mapped = req.prepareArgs({
      aname: [aname, string()],
      gname: [gname, string()],
      next: [next, optional(bigint())],
    });
    req.query('next', mapped.next);
    req.appendTemplatePath`/v1/groups/${mapped.aname}/name/${mapped.gname}`;
    req.throwOn(400, ConnectivityManagementResultError, 'Error response.');
    return req.callAsJson(deviceGroupDevicesDataSchema, requestOptions);
  }

  /**
   * Make changes to a device group, including changing the name and description, and adding or removing
   * devices.
   *
   * @param aname        Account name.
   * @param gname        Group name.
   * @param body         Request to update device group.
   * @return Response from the API call
   */
  async updateDeviceGroup(
    aname: string,
    gname: string,
    body: DeviceGroupUpdateRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConnectivityManagementSuccessResult>> {
    const req = this.createRequest('PUT');
    req.baseUrl('M2M');
    const mapped = req.prepareArgs({
      aname: [aname, string()],
      gname: [gname, string()],
      body: [body, deviceGroupUpdateRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/v1/groups/${mapped.aname}/name/${mapped.gname}`;
    req.throwOn(400, ConnectivityManagementResultError, 'Error response.');
    return req.callAsJson(
      connectivityManagementSuccessResultSchema,
      requestOptions
    );
  }

  /**
   * Deletes a device group from the account. Devices in the group are moved to the default device group
   * and are not deleted from the account.
   *
   * @param aname Account name.
   * @param gname Group name.
   * @return Response from the API call
   */
  async deleteDeviceGroup(
    aname: string,
    gname: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ConnectivityManagementSuccessResult>> {
    const req = this.createRequest('DELETE');
    req.baseUrl('M2M');
    const mapped = req.prepareArgs({
      aname: [aname, string()],
      gname: [gname, string()],
    });
    req.appendTemplatePath`/v1/groups/${mapped.aname}/name/${mapped.gname}`;
    req.throwOn(400, ConnectivityManagementResultError, 'Error response.');
    return req.callAsJson(
      connectivityManagementSuccessResultSchema,
      requestOptions
    );
  }
}
