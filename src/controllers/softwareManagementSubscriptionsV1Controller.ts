/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { FotaV1ResultError } from '../errors/fotaV1ResultError';
import {
  AccountLicenseInfo,
  accountLicenseInfoSchema,
} from '../models/accountLicenseInfo';
import {
  V1AccountSubscription,
  v1AccountSubscriptionSchema,
} from '../models/v1AccountSubscription';
import { string } from '../schema';
import { BaseController } from './baseController';

export class SoftwareManagementSubscriptionsV1Controller extends BaseController {
  /**
   * This subscriptions endpoint retrieves an account's current Software Management Service subscription
   * status.
   *
   * @param account Account identifier in "##########-#####".
   * @return Response from the API call
   */
  async getAccountSubscriptionStatus(
    account: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V1AccountSubscription>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V1');
    const mapped = req.prepareArgs({ account: [account, string()] });
    req.appendTemplatePath`/subscriptions/${mapped.account}`;
    req.throwOn(400, FotaV1ResultError, 'Unexpected error.');
    return req.callAsJson(v1AccountSubscriptionSchema, requestOptions);
  }

  /**
   * Returns information about an account's Software Management Services licenses and a list of licensed
   * devices.
   *
   * @param account    Account identifier in "##########-#####".
   * @param startIndex The zero-based number of the first record to return. Set startIndex=0 for the first
   *                             request. If there are more than 1,000 devices in the response, set startIndex=1000 for
   *                             the second request, 2000 for the third request, etc.
   * @return Response from the API call
   */
  async getAccountLicenseStatus(
    account: string,
    startIndex: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccountLicenseInfo>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V1');
    const mapped = req.prepareArgs({
      account: [account, string()],
      startIndex: [startIndex, string()],
    });
    req.appendTemplatePath`/licenses/${mapped.account}/index/${mapped.startIndex}`;
    req.throwOn(400, FotaV1ResultError, 'Unexpected error.');
    return req.callAsJson(accountLicenseInfoSchema, requestOptions);
  }
}
