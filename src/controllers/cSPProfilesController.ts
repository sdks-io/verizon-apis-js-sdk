/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  EdgeServiceOnboardingResultError,
} from '../errors/edgeServiceOnboardingResultError';
import { CSPProfile, cSPProfileSchema } from '../models/cSPProfile';
import { CSPProfileData, cSPProfileDataSchema } from '../models/cSPProfileData';
import {
  EdgeServiceOnboardingDeleteResult,
  edgeServiceOnboardingDeleteResultSchema,
} from '../models/edgeServiceOnboardingDeleteResult';
import { bigint, optional, string } from '../schema';
import { BaseController } from './baseController';

export class CSPProfilesController extends BaseController {
  /**
   * Fetch available cloud credentials within user's organization.
   *
   * @param accountName   User account name.
   * @param correlationId
   * @param q             Use the coloumn (:) character to separate multiple query params eg type=AWS:
   *                                awsCspProfile.credType=ACCESS_KEY,ROLE_ARN:state=UNVERIFIED,VERIFIED.
   * @param limit         Number of items to return.
   * @param offSet        Id of the last respose value in the previous list.
   * @return Response from the API call
   */
  async fetchCloudCredentialDetails(
    accountName: string,
    correlationId?: string,
    q?: string,
    limit?: bigint,
    offSet?: bigint,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CSPProfileData>> {
    const req = this.createRequest('GET', '/v1/cspProfiles/');
    req.baseUrl('Services');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      correlationId: [correlationId, optional(string())],
      q: [q, optional(string())],
      limit: [limit, optional(bigint())],
      offSet: [offSet, optional(bigint())],
    });
    req.header('AccountName', mapped.accountName);
    req.header('correlationId', mapped.correlationId);
    req.query('q', mapped.q);
    req.query('limit', mapped.limit);
    req.query('offSet', mapped.offSet);
    req.throwOn(401, EdgeServiceOnboardingResultError, 'Unauthorized.');
    req.throwOn(403, EdgeServiceOnboardingResultError, 'Forbidden.');
    req.throwOn(404, EdgeServiceOnboardingResultError, 'Not found.');
    req.throwOn(429, EdgeServiceOnboardingResultError, 'Too many requests.');
    req.throwOn(500, EdgeServiceOnboardingResultError, 'Internal Server Error.');
    req.defaultToError(EdgeServiceOnboardingResultError, 'Forbidden.');
    return req.callAsJson(cSPProfileDataSchema, requestOptions);
  }

  /**
   * Create a new cloud credential within user's organization.
   *
   * @param accountName   User account name.
   * @param body
   * @param correlationId
   * @return Response from the API call
   */
  async createCloudCredential(
    accountName: string,
    body: CSPProfile,
    correlationId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CSPProfile>> {
    const req = this.createRequest('POST', '/v1/cspProfiles/');
    req.baseUrl('Services');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      body: [body, cSPProfileSchema],
      correlationId: [correlationId, optional(string())],
    });
    req.header('AccountName', mapped.accountName);
    req.header('Content-Type', 'application/json');
    req.header('correlationId', mapped.correlationId);
    req.json(mapped.body);
    req.throwOn(400, EdgeServiceOnboardingResultError, 'Bad Request.');
    req.throwOn(401, EdgeServiceOnboardingResultError, 'Unauthorized.');
    req.throwOn(403, EdgeServiceOnboardingResultError, 'Forbidden.');
    req.throwOn(429, EdgeServiceOnboardingResultError, 'Too many requests.');
    req.throwOn(500, EdgeServiceOnboardingResultError, 'Internal Server Error.');
    req.defaultToError(EdgeServiceOnboardingResultError, 'Forbidden.');
    return req.callAsJson(cSPProfileSchema, requestOptions);
  }

  /**
   * Remove a cloud credential from user's organization.
   *
   * @param accountName   User account name.
   * @param id            CSP Profile Id.
   * @param correlationId
   * @return Response from the API call
   */
  async removeCloudCredential(
    accountName: string,
    id: string,
    correlationId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EdgeServiceOnboardingDeleteResult>> {
    const req = this.createRequest('DELETE');
    req.baseUrl('Services');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      id: [id, string()],
      correlationId: [correlationId, optional(string())],
    });
    req.header('AccountName', mapped.accountName);
    req.header('correlationId', mapped.correlationId);
    req.appendTemplatePath`/v1/cspProfiles/${mapped.id}`;
    req.throwOn(401, EdgeServiceOnboardingResultError, 'Unauthorized.');
    req.throwOn(404, EdgeServiceOnboardingResultError, 'Not Found.');
    req.throwOn(500, EdgeServiceOnboardingResultError, 'Internal Server Error.');
    return req.callAsJson(
      edgeServiceOnboardingDeleteResultSchema,
      requestOptions
    );
  }
}
