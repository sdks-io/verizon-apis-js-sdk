/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { GIORestErrorResponseError } from '../errors/gIORestErrorResponseError';
import {
  GIORequestResponse,
  gIORequestResponseSchema,
} from '../models/gIORequestResponse';
import {
  GIOSMSSendRequest,
  gIOSMSSendRequestSchema,
} from '../models/gIOSMSSendRequest';
import {
  SMSEventHistoryRequest,
  sMSEventHistoryRequestSchema,
} from '../models/sMSEventHistoryRequest';
import {
  SmsMessagesResponse,
  smsMessagesResponseSchema,
} from '../models/smsMessagesResponse';
import {
  SuccessResponse,
  successResponseSchema,
} from '../models/successResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class DeviceSMSMessagingController extends BaseController {
  /**
   * Sends an SMS message to one device. Messages are queued on the M2M MC Platform and sent as soon as
   * possible, but they may be delayed due to traffic and routing considerations.
   *
   * @param body         SMS message to an indiividual device.
   * @return Response from the API call
   */
  async sendAnSmsMessage(
    body: GIOSMSSendRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GIORequestResponse>> {
    const req = this.createRequest('POST', '/m2m/v1/sms');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ body: [body, gIOSMSSendRequestSchema] });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(GIORestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(gIORequestResponseSchema, requestOptions);
  }

  /**
   * Retrieves queued SMS messages sent by all M2M MC devices associated with an account.
   *
   * @param accountName Numeric account name
   * @param next        Continue the previous query from the pageUrl in Location Header
   * @return Response from the API call
   */
  async getSmsMessages(
    accountName: string,
    next?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SmsMessagesResponse>> {
    const req = this.createRequest('GET');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      next: [next, optional(string())],
    });
    req.query('next', mapped.next);
    req.appendTemplatePath`/m2m/v1/sms/${mapped.accountName}/history`;
    req.defaultToError(GIORestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(smsMessagesResponseSchema, requestOptions);
  }

  /**
   * Starts delivery of SMS messages for the specified account.
   *
   * @param accountName Numeric account name
   * @return Response from the API call
   */
  async startSmsMessageDelivery(
    accountName: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SuccessResponse>> {
    const req = this.createRequest('PUT');
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({ accountName: [accountName, string()] });
    req.appendTemplatePath`/m2m/v1/sms/${mapped.accountName}/startCallbacks`;
    req.defaultToError(GIORestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(successResponseSchema, requestOptions);
  }

  /**
   * Returns a list of sms history for a given device during a specified time frame.
   *
   * @param body         Device Query
   * @return Response from the API call
   */
  async listSmsMessageHistory(
    body: SMSEventHistoryRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<GIORequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v1/devices/sms/history/actions/list'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, sMSEventHistoryRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(GIORestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(gIORequestResponseSchema, requestOptions);
  }
}
