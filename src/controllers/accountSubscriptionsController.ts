/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { SecurityResultError } from '../errors/securityResultError';
import {
  SecuritySubscriptionRequest,
  securitySubscriptionRequestSchema,
} from '../models/securitySubscriptionRequest';
import {
  SecuritySubscriptionResult,
  securitySubscriptionResultSchema,
} from '../models/securitySubscriptionResult';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class AccountSubscriptionsController extends BaseController {
  /**
   * Retrieves the total number of SIM-Secure for IoT subscription licenses purchased for your account by
   * license type, and lists the number of licenses assigned and available for each license type.
   *
   * @param body         Request for account subscription.
   * @param xRequestID   Transaction Id.
   * @return Response from the API call
   */
  async listAccountSubscriptions(
    body: SecuritySubscriptionRequest,
    xRequestID?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SecuritySubscriptionResult>> {
    const req = this.createRequest(
      'POST',
      '/v1/accounts/subscriptions/actions/list'
    );
    req.baseUrl('M2M');
    const mapped = req.prepareArgs({
      body: [body, securitySubscriptionRequestSchema],
      xRequestID: [xRequestID, optional(string())],
    });
    req.header('Content-Type', 'application/json');
    req.header('X-Request-ID', mapped.xRequestID);
    req.json(mapped.body);
    req.throwOn(400, SecurityResultError, 'Bad request.');
    req.throwOn(401, SecurityResultError, 'Unauthorized request.');
    req.throwOn(403, SecurityResultError, 'Request forbidden.');
    req.throwOn(404, SecurityResultError, 'Not Found / Does not exist.');
    req.throwOn(406, SecurityResultError, 'Format / Request Unacceptable.');
    req.throwOn(429, SecurityResultError, 'Too many requests.');
    req.defaultToError(SecurityResultError, 'Error response.');
    return req.callAsJson(securitySubscriptionResultSchema, requestOptions);
  }
}
