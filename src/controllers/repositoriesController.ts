/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  EdgeServiceOnboardingResultError,
} from '../errors/edgeServiceOnboardingResultError';
import {
  EdgeServiceOnboardingDeleteResult,
  edgeServiceOnboardingDeleteResultSchema,
} from '../models/edgeServiceOnboardingDeleteResult';
import { Repository, repositorySchema } from '../models/repository';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';

export class RepositoriesController extends BaseController {
  /**
   * Get all repositories in the platform.
   *
   * @param accountName   User account name.
   * @param correlationId
   * @param type          Repository type.
   * @return Response from the API call
   */
  async listRepositories(
    accountName: string,
    correlationId?: string,
    type?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Repository[]>> {
    const req = this.createRequest('GET', '/v1/config/repository');
    req.baseUrl('Services');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      correlationId: [correlationId, optional(string())],
      type: [type, optional(string())],
    });
    req.header('AccountName', mapped.accountName);
    req.header('correlationId', mapped.correlationId);
    req.query('type', mapped.type);
    req.throwOn(401, EdgeServiceOnboardingResultError, 'Unauthorized.');
    req.throwOn(404, EdgeServiceOnboardingResultError, 'Not found.');
    req.throwOn(500, EdgeServiceOnboardingResultError, 'Internal Server Error.');
    return req.callAsJson(array(repositorySchema), requestOptions);
  }

  /**
   * Create a repository within user's organziation.
   *
   * @param accountName   User account name.
   * @param body
   * @param correlationId
   * @return Response from the API call
   */
  async createRepository(
    accountName: string,
    body: Repository,
    correlationId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Repository>> {
    const req = this.createRequest('POST', '/v1/config/repository');
    req.baseUrl('Services');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      body: [body, repositorySchema],
      correlationId: [correlationId, optional(string())],
    });
    req.header('AccountName', mapped.accountName);
    req.header('Content-Type', 'application/json');
    req.header('correlationId', mapped.correlationId);
    req.json(mapped.body);
    req.throwOn(400, EdgeServiceOnboardingResultError, 'Bad Request.');
    req.throwOn(401, EdgeServiceOnboardingResultError, 'Unauthorized.');
    req.throwOn(500, EdgeServiceOnboardingResultError, 'Internal Server Error.');
    return req.callAsJson(repositorySchema, requestOptions);
  }

  /**
   * Delete the repository.
   *
   * @param accountName    User account name.
   * @param repositoryName Name of the repository which is about to be deleted.
   * @param correlationId
   * @return Response from the API call
   */
  async deleteRepository(
    accountName: string,
    repositoryName: string,
    correlationId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<EdgeServiceOnboardingDeleteResult>> {
    const req = this.createRequest('DELETE');
    req.baseUrl('Services');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      repositoryName: [repositoryName, string()],
      correlationId: [correlationId, optional(string())],
    });
    req.header('AccountName', mapped.accountName);
    req.header('correlationId', mapped.correlationId);
    req.appendTemplatePath`/v1/config/repository/${mapped.repositoryName}`;
    req.throwOn(400, EdgeServiceOnboardingResultError, 'Bad Request.');
    req.throwOn(401, EdgeServiceOnboardingResultError, 'Unauthorized.');
    req.throwOn(404, EdgeServiceOnboardingResultError, 'Not found.');
    req.throwOn(500, EdgeServiceOnboardingResultError, 'Internal Server Error.');
    return req.callAsJson(
      edgeServiceOnboardingDeleteResultSchema,
      requestOptions
    );
  }
}
