/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ConnectivityManagementResultError,
} from '../errors/connectivityManagementResultError';
import {
  DeviceManagementResult,
  deviceManagementResultSchema,
} from '../models/deviceManagementResult';
import {
  NotificationReportStatusRequest,
  notificationReportStatusRequestSchema,
} from '../models/notificationReportStatusRequest';
import {
  RetrieveMonitorsRequest,
  retrieveMonitorsRequestSchema,
} from '../models/retrieveMonitorsRequest';
import { BaseController } from './baseController';

export class DeviceDiagnosticsController extends BaseController {
  /**
   * If the devices do not already exist in the account, this API resource adds them before activation.
   *
   * @param body         Retrieve Reachability Report Status for a device.
   * @return Response from the API call
   */
  async deviceReachabilityStatusUsingPOST(
    body: NotificationReportStatusRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceManagementResult>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v1/diagnostics/basic/devicereachability/status'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, notificationReportStatusRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ConnectivityManagementResultError, 'Error response.');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(deviceManagementResultSchema, requestOptions);
  }

  /**
   * Retrieve all the active monitors.
   *
   * @param body         Retrieve Monitor Request.
   * @return Response from the API call
   */
  async retrieveActiveMonitorsUsingPOST(
    body: RetrieveMonitorsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceManagementResult>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v1/diagnostics/basic/devicereachability/monitors'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, retrieveMonitorsRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, ConnectivityManagementResultError, 'Error response.');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(deviceManagementResultSchema, requestOptions);
  }
}
