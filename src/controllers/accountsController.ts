/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  ConnectivityManagementResultError,
} from '../errors/connectivityManagementResultError';
import { Account, accountSchema } from '../models/account';
import {
  AccountLeadsResult,
  accountLeadsResultSchema,
} from '../models/accountLeadsResult';
import {
  AccountStatesAndServices,
  accountStatesAndServicesSchema,
} from '../models/accountStatesAndServices';
import { bigint, optional, string } from '../schema';
import { BaseController } from './baseController';

export class AccountsController extends BaseController {
  /**
   * Returns information about a specified account.
   *
   * @param aname Account name.
   * @return Response from the API call
   */
  async getAccountInformation(
    aname: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<Account>> {
    const req = this.createRequest('GET');
    req.baseUrl('M2M');
    const mapped = req.prepareArgs({ aname: [aname, string()] });
    req.appendTemplatePath`/v1/accounts/${mapped.aname}`;
    req.throwOn(400, ConnectivityManagementResultError, 'Error response.');
    return req.callAsJson(accountSchema, requestOptions);
  }

  /**
   * Returns a list and details of all custom services and states defined for a specified account.
   *
   * @param aname Account name.
   * @return Response from the API call
   */
  async listAccountStatesAndServices(
    aname: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccountStatesAndServices>> {
    const req = this.createRequest('GET');
    req.baseUrl('M2M');
    const mapped = req.prepareArgs({ aname: [aname, string()] });
    req.appendTemplatePath`/v1/accounts/${mapped.aname}/statesandservices`;
    req.throwOn(400, ConnectivityManagementResultError, 'Error response.');
    return req.callAsJson(accountStatesAndServicesSchema, requestOptions);
  }

  /**
   * When HTTP status is 202, a URL will be returned in the Location header of the form /leads/{aname}?
   * next={token}. This URL can be used to request the next set of leads.
   *
   * @param aname Account name.
   * @param next  Continue the previous query from the pageUrl in Location Header.
   * @return Response from the API call
   */
  async listAccountLeads(
    aname: string,
    next?: bigint,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AccountLeadsResult>> {
    const req = this.createRequest('GET');
    req.baseUrl('M2M');
    const mapped = req.prepareArgs({
      aname: [aname, string()],
      next: [next, optional(bigint())],
    });
    req.query('next', mapped.next);
    req.appendTemplatePath`/v1/leads/${mapped.aname}`;
    req.throwOn(400, ConnectivityManagementResultError, 'Error response.');
    return req.callAsJson(accountLeadsResultSchema, requestOptions);
  }
}
