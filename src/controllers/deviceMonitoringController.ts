/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { RestErrorResponseError } from '../errors/restErrorResponseError';
import {
  NotificationReportRequest,
  notificationReportRequestSchema,
} from '../models/notificationReportRequest';
import {
  RequestResponse,
  requestResponseSchema,
} from '../models/requestResponse';
import { array, string } from '../schema';
import { BaseController } from './baseController';

export class DeviceMonitoringController extends BaseController {
  /**
   * Register for notification reports based on the request type.
   *
   * @param body         Create Reachability Report Request
   * @return Response from the API call
   */
  async deviceReachability(
    body: NotificationReportRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/v1/diagnostics/basic/devicereachability'
    );
    req.baseUrl('M2M');
    const mapped = req.prepareArgs({
      body: [body, notificationReportRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, RestErrorResponseError, 'Error Response');
    return req.callAsJson(requestResponseSchema, requestOptions);
  }

  /**
   * Stop Device Reachability monitors.
   *
   * @param accountName The numeric name of the account.
   * @param monitorIds  The array contains the monitorIDs (UUID) for which the monitor is to be deleted.
   * @return Response from the API call
   */
  async stopDeviceReachability(
    accountName: string,
    monitorIds: string[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RequestResponse>> {
    const req = this.createRequest(
      'DELETE',
      '/v1/diagnostics/basic/devicereachability'
    );
    req.baseUrl('M2M');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      monitorIds: [monitorIds, array(string())],
    });
    req.query('accountName', mapped.accountName);
    req.query('monitorIds', mapped.monitorIds);
    req.throwOn(400, RestErrorResponseError, 'Error Response');
    return req.callAsJson(requestResponseSchema, requestOptions);
  }
}
