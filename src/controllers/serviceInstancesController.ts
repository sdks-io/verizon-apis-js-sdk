/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  EdgeServiceLaunchResultError,
} from '../errors/edgeServiceLaunchResultError';
import {
  ServiceInstancesResult,
  serviceInstancesResultSchema,
} from '../models/serviceInstancesResult';
import {
  ServiceInstancesResultSetItem,
  serviceInstancesResultSetItemSchema,
} from '../models/serviceInstancesResultSetItem';
import { array, boolean, optional, string } from '../schema';
import { BaseController } from './baseController';

export class ServiceInstancesController extends BaseController {
  /**
   * Retrieve information of a service instance.
   *
   * @param serviceInstanceId Unique Id of the service instance.
   * @param accountName       User account name.
   * @param cluster           Example: false
   * @return Response from the API call
   */
  async retrieveServiceInstance(
    serviceInstanceId: string,
    accountName: string,
    cluster?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServiceInstancesResultSetItem>> {
    const req = this.createRequest('GET');
    req.baseUrl('Services');
    const mapped = req.prepareArgs({
      serviceInstanceId: [serviceInstanceId, string()],
      accountName: [accountName, string()],
      cluster: [cluster, optional(boolean())],
    });
    req.header('AccountName', mapped.accountName);
    req.query('cluster', mapped.cluster);
    req.appendTemplatePath`/v1/service/instances/${mapped.serviceInstanceId}`;
    req.throwOn(400, EdgeServiceLaunchResultError, 'Bad Request.');
    req.throwOn(401, EdgeServiceLaunchResultError, 'Unauthorized.');
    req.throwOn(403, EdgeServiceLaunchResultError, 'Forbidden.');
    req.throwOn(404, EdgeServiceLaunchResultError, 'Not found.');
    req.throwOn(415, EdgeServiceLaunchResultError, 'Unsupported media type.');
    req.throwOn(429, EdgeServiceLaunchResultError, 'Too many requests.');
    req.throwOn(500, EdgeServiceLaunchResultError, 'Internal Server Error.');
    req.defaultToError(EdgeServiceLaunchResultError, 'Unexpected error.');
    return req.callAsJson(serviceInstancesResultSetItemSchema, requestOptions);
  }

  /**
   * Retrieve all instances for all services.
   *
   * @param accountName  User account name.
   * @param offset
   * @param state
   * @param limit
   * @param searchbyname
   * @param listofstate
   * @return Response from the API call
   */
  async listServicesInstances(
    accountName: string,
    offset?: string,
    state?: string,
    limit?: string,
    searchbyname?: string,
    listofstate?: string[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServiceInstancesResult>> {
    const req = this.createRequest('GET', '/v1/service/instances');
    req.baseUrl('Services');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      offset: [offset, optional(string())],
      state: [state, optional(string())],
      limit: [limit, optional(string())],
      searchbyname: [searchbyname, optional(string())],
      listofstate: [listofstate, optional(array(string()))],
    });
    req.header('AccountName', mapped.accountName);
    req.query('offset', mapped.offset);
    req.query('state', mapped.state);
    req.query('limit', mapped.limit);
    req.query('searchbyname', mapped.searchbyname);
    req.query('listofstate', mapped.listofstate);
    req.throwOn(400, EdgeServiceLaunchResultError, 'Bad Request.');
    req.throwOn(401, EdgeServiceLaunchResultError, 'Unauthorized.');
    req.throwOn(403, EdgeServiceLaunchResultError, 'Forbidden.');
    req.throwOn(404, EdgeServiceLaunchResultError, 'Not found.');
    req.throwOn(415, EdgeServiceLaunchResultError, 'Unsupported media type.');
    req.throwOn(429, EdgeServiceLaunchResultError, 'Too many requests.');
    req.throwOn(500, EdgeServiceLaunchResultError, 'Internal Server Error.');
    req.defaultToError(EdgeServiceLaunchResultError, 'Unexpected error.');
    return req.callAsJson(serviceInstancesResultSchema, requestOptions);
  }
}
