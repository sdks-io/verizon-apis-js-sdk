/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  EdgeServiceOnboardingResultError,
} from '../errors/edgeServiceOnboardingResultError';
import {
  AssociateCloudCredentialResult,
  associateCloudCredentialResultSchema,
} from '../models/associateCloudCredentialResult';
import {
  ClaimStatusRequest,
  claimStatusRequestSchema,
} from '../models/claimStatusRequest';
import {
  CSPProfileIdRequest,
  cSPProfileIdRequestSchema,
} from '../models/cSPProfileIdRequest';
import { ServiceClaims, serviceClaimsSchema } from '../models/serviceClaims';
import {
  SortDirectionEnum,
  sortDirectionEnumSchema,
} from '../models/sortDirectionEnum';
import { bigint, boolean, optional, string } from '../schema';
import { BaseController } from './baseController';

export class ServiceClaimsController extends BaseController {
  /**
   * Fetch all service's claim(s) associated with a service. Service claims are generated based on
   * service's compatibility with different cloud service provider.
   *
   * @param accountName   User account name.
   * @param serviceId     Auto-generated Id of the claim whose information needs to be fetched.
   * @param correlationId
   * @param claimStatus   Queries with claim status on the claims.
   * @param q             Use the comma (,) character to separate multiple values,eg
   *                                           claimType=Public MEC:claims.sandBoxState=NOT_STARTED,STARTED.
   * @param limit         Number of items to return.
   * @param offSet        Id of the last respose value in the previous list.
   * @param sortKey       Sorts the response by an attribute. Default is createdDate.
   * @param sortDir       Sorts the response. Use asc for ascending or desc for descending order.
   *                                           The default is desc.
   * @param detailsFlag   Default as true. If it is true then it will return all details.
   * @return Response from the API call
   */
  async listServiceClaims(
    accountName: string,
    serviceId: string,
    correlationId?: string,
    claimStatus?: string,
    q?: string,
    limit?: bigint,
    offSet?: bigint,
    sortKey?: string,
    sortDir?: SortDirectionEnum,
    detailsFlag?: boolean,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServiceClaims>> {
    const req = this.createRequest('GET');
    req.baseUrl('Services');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      serviceId: [serviceId, string()],
      correlationId: [correlationId, optional(string())],
      claimStatus: [claimStatus, optional(string())],
      q: [q, optional(string())],
      limit: [limit, optional(bigint())],
      offSet: [offSet, optional(bigint())],
      sortKey: [sortKey, optional(string())],
      sortDir: [sortDir, optional(sortDirectionEnumSchema)],
      detailsFlag: [detailsFlag, optional(boolean())],
    });
    req.header('AccountName', mapped.accountName);
    req.header('correlationId', mapped.correlationId);
    req.query('claimStatus', mapped.claimStatus);
    req.query('q', mapped.q);
    req.query('limit', mapped.limit);
    req.query('offSet', mapped.offSet);
    req.query('sortKey', mapped.sortKey);
    req.query('sortDir', mapped.sortDir);
    req.query('detailsFlag', mapped.detailsFlag);
    req.appendTemplatePath`/v1/service/${mapped.serviceId}/claims`;
    req.throwOn(400, EdgeServiceOnboardingResultError, 'Bad request.');
    req.throwOn(401, EdgeServiceOnboardingResultError, 'Unauthorized.');
    req.throwOn(404, EdgeServiceOnboardingResultError, 'Not found.');
    req.throwOn(500, EdgeServiceOnboardingResultError, 'Internal Server Error.');
    return req.callAsJson(serviceClaimsSchema, requestOptions);
  }

  /**
   * Associate an existing cloud credential with a service's claim which will be used to connect to
   * user's cloud provider.
   *
   * @param accountName   User account name.
   * @param serviceId     System generated unique identifier of the service which user
   *                                                    is using.
   * @param claimId       System generated unique identifier for the claim which user is
   *                                                    using.
   * @param body
   * @param correlationId
   * @return Response from the API call
   */
  async associateCloudCredentialWithServiceClaim(
    accountName: string,
    serviceId: string,
    claimId: string,
    body: CSPProfileIdRequest,
    correlationId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<AssociateCloudCredentialResult>> {
    const req = this.createRequest('POST');
    req.baseUrl('Services');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      serviceId: [serviceId, string()],
      claimId: [claimId, string()],
      body: [body, cSPProfileIdRequestSchema],
      correlationId: [correlationId, optional(string())],
    });
    req.header('AccountName', mapped.accountName);
    req.header('Content-Type', 'application/json');
    req.header('correlationId', mapped.correlationId);
    req.json(mapped.body);
    req.appendTemplatePath`/v1/services/${mapped.serviceId}/claims/${mapped.claimId}/associateCspProfile`;
    req.throwOn(400, EdgeServiceOnboardingResultError, 'Bad request.');
    req.throwOn(401, EdgeServiceOnboardingResultError, 'Unauthorized.');
    req.throwOn(404, EdgeServiceOnboardingResultError, 'Not Found.');
    req.throwOn(500, EdgeServiceOnboardingResultError, 'Internal Server Error.');
    return req.callAsJson(associateCloudCredentialResultSchema, requestOptions);
  }

  /**
   * Mark a service's claim status as complete post successful verification of sandbox testing in the
   * respective sandbox environment.
   *
   * @param accountName   User account name.
   * @param serviceId     System generated unique identifier of the service which user is using.
   * @param claimId       System generated unique identifier of the claim which user is using.
   * @param correlationId
   * @return Response from the API call
   */
  async markServiceClaimStatusAsCompleted(
    accountName: string,
    serviceId: string,
    claimId: string,
    correlationId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    req.baseUrl('Services');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      serviceId: [serviceId, string()],
      claimId: [claimId, string()],
      correlationId: [correlationId, optional(string())],
    });
    req.header('AccountName', mapped.accountName);
    req.header('correlationId', mapped.correlationId);
    req.appendTemplatePath`/v1/services/${mapped.serviceId}/claims/${mapped.claimId}/claimStatusCompleted`;
    req.throwOn(400, EdgeServiceOnboardingResultError, 'Bad request.');
    req.throwOn(401, EdgeServiceOnboardingResultError, 'Unauthorized.');
    req.throwOn(404, EdgeServiceOnboardingResultError, 'Not Found.');
    req.throwOn(500, EdgeServiceOnboardingResultError, 'Internal Server Error.');
    return req.call(requestOptions);
  }

  /**
   * Using this API user can update service's claim status as complete/verified etc.
   *
   * @param accountName   User account name.
   * @param serviceId     System generated unique identifier of the service which user is
   *                                                   using.
   * @param claimId       System generated unique identifier of the claim which user is
   *                                                   using.
   * @param body
   * @param correlationId
   * @return Response from the API call
   */
  async updateServiceClaimStatus(
    accountName: string,
    serviceId: string,
    claimId: string,
    body: ClaimStatusRequest,
    correlationId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<void>> {
    const req = this.createRequest('POST');
    req.baseUrl('Services');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      serviceId: [serviceId, string()],
      claimId: [claimId, string()],
      body: [body, claimStatusRequestSchema],
      correlationId: [correlationId, optional(string())],
    });
    req.header('AccountName', mapped.accountName);
    req.header('Content-Type', 'application/json');
    req.header('correlationId', mapped.correlationId);
    req.json(mapped.body);
    req.appendTemplatePath`/v1/services/${mapped.serviceId}/claims/${mapped.claimId}/claimStatus`;
    req.throwOn(400, EdgeServiceOnboardingResultError, 'Bad request.');
    req.throwOn(401, EdgeServiceOnboardingResultError, 'Unauthorized.');
    req.throwOn(404, EdgeServiceOnboardingResultError, 'Not Found.');
    req.throwOn(500, EdgeServiceOnboardingResultError, 'Internal Server Error.');
    return req.call(requestOptions);
  }
}
