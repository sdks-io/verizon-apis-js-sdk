/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { FotaV2ResultError } from '../errors/fotaV2ResultError';
import {
  CallbackSummary,
  callbackSummarySchema,
} from '../models/callbackSummary';
import {
  FotaV2CallbackRegistrationRequest,
  fotaV2CallbackRegistrationRequestSchema,
} from '../models/fotaV2CallbackRegistrationRequest';
import {
  FotaV2CallbackRegistrationResult,
  fotaV2CallbackRegistrationResultSchema,
} from '../models/fotaV2CallbackRegistrationResult';
import {
  FotaV2SuccessResult,
  fotaV2SuccessResultSchema,
} from '../models/fotaV2SuccessResult';
import { string } from '../schema';
import { BaseController } from './baseController';

export class SoftwareManagementCallbacksV2Controller extends BaseController {
  /**
   * This endpoint allows user to get the registered callback information.
   *
   * @param account Account identifier.
   * @return Response from the API call
   */
  async listRegisteredCallbacks(
    account: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<CallbackSummary>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({ account: [account, string()] });
    req.appendTemplatePath`/callbacks/${mapped.account}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(callbackSummarySchema, requestOptions);
  }

  /**
   * This endpoint allows user to update the HTTPS callback address.
   *
   * @param account      Account identifier.
   * @param body         Callback URL registration.
   * @return Response from the API call
   */
  async updateCallback(
    account: string,
    body: FotaV2CallbackRegistrationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FotaV2CallbackRegistrationResult>> {
    const req = this.createRequest('PUT');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      body: [body, fotaV2CallbackRegistrationRequestSchema],
    });
    req.header('Content-Type', '*/*');
    req.json(mapped.body);
    req.appendTemplatePath`/callbacks/${mapped.account}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(
      fotaV2CallbackRegistrationResultSchema,
      requestOptions
    );
  }

  /**
   * This endpoint allows user to create the HTTPS callback address.
   *
   * @param account      Account identifier.
   * @param body         Callback URL registration.
   * @return Response from the API call
   */
  async registerCallback(
    account: string,
    body: FotaV2CallbackRegistrationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FotaV2CallbackRegistrationResult>> {
    const req = this.createRequest('POST');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      body: [body, fotaV2CallbackRegistrationRequestSchema],
    });
    req.header('Content-Type', '*/*');
    req.json(mapped.body);
    req.appendTemplatePath`/callbacks/${mapped.account}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(
      fotaV2CallbackRegistrationResultSchema,
      requestOptions
    );
  }

  /**
   * This endpoint allows user to delete a previously registered callback URL.
   *
   * @param account Account identifier.
   * @return Response from the API call
   */
  async deregisterCallback(
    account: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FotaV2SuccessResult>> {
    const req = this.createRequest('DELETE');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({ account: [account, string()] });
    req.appendTemplatePath`/callbacks/${mapped.account}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(fotaV2SuccessResultSchema, requestOptions);
  }
}
