/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { DeviceLocationResultError } from '../errors/deviceLocationResultError';
import { ConsentRequest, consentRequestSchema } from '../models/consentRequest';
import {
  DeviceLocationSuccessResult,
  deviceLocationSuccessResultSchema,
} from '../models/deviceLocationSuccessResult';
import {
  DevicesConsentResult,
  devicesConsentResultSchema,
} from '../models/devicesConsentResult';
import { string } from '../schema';
import { BaseController } from './baseController';

export class ExclusionsController extends BaseController {
  /**
   * This consents endpoint sets a new exclusion list.
   *
   * @param body         Request to update account consent exclusion list.
   * @return Response from the API call
   */
  async excludeDevices(
    body: ConsentRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceLocationSuccessResult>> {
    const req = this.createRequest('POST', '/consents');
    req.baseUrl('Device Location');
    const mapped = req.prepareArgs({ body: [body, consentRequestSchema] });
    req.header('Content-Type', '*/*');
    req.json(mapped.body);
    req.throwOn(400, DeviceLocationResultError, 'Unexpected error.');
    return req.callAsJson(deviceLocationSuccessResultSchema, requestOptions);
  }

  /**
   * Removes devices from the exclusion list so that they can be located with Device Location Services
   * requests.
   *
   * @param accountName The numeric name of the account.
   * @param deviceList  A list of the device IDs to remove from the exclusion list.
   * @return Response from the API call
   */
  async removeDevicesFromExclusionList(
    accountName: string,
    deviceList: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceLocationSuccessResult>> {
    const req = this.createRequest('DELETE', '/consents');
    req.baseUrl('Device Location');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      deviceList: [deviceList, string()],
    });
    req.query('accountName', mapped.accountName);
    req.query('deviceList', mapped.deviceList);
    req.throwOn(400, DeviceLocationResultError, 'Unexpected error.');
    return req.callAsJson(deviceLocationSuccessResultSchema, requestOptions);
  }

  /**
   * This consents endpoint retrieves a list of excluded devices in an account.
   *
   * @param account    Account identifier in "##########-#####".
   * @param startIndex Zero-based number of the first record to return.
   * @return Response from the API call
   */
  async listExcludedDevices(
    account: string,
    startIndex: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DevicesConsentResult>> {
    const req = this.createRequest('GET');
    req.baseUrl('Device Location');
    const mapped = req.prepareArgs({
      account: [account, string()],
      startIndex: [startIndex, string()],
    });
    req.appendTemplatePath`/consents/${mapped.account}/index/${mapped.startIndex}`;
    req.throwOn(400, DeviceLocationResultError, 'Unexpected error.');
    return req.callAsJson(devicesConsentResultSchema, requestOptions);
  }
}
