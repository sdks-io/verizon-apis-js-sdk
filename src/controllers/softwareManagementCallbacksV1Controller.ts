/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { FotaV1ResultError } from '../errors/fotaV1ResultError';
import {
  CallbackServiceEnum,
  callbackServiceEnumSchema,
} from '../models/callbackServiceEnum';
import {
  FotaV1CallbackRegistrationRequest,
  fotaV1CallbackRegistrationRequestSchema,
} from '../models/fotaV1CallbackRegistrationRequest';
import {
  FotaV1CallbackRegistrationResult,
  fotaV1CallbackRegistrationResultSchema,
} from '../models/fotaV1CallbackRegistrationResult';
import {
  FotaV1SuccessResult,
  fotaV1SuccessResultSchema,
} from '../models/fotaV1SuccessResult';
import {
  RegisteredCallbacks,
  registeredCallbacksSchema,
} from '../models/registeredCallbacks';
import { array, string } from '../schema';
import { BaseController } from './baseController';

export class SoftwareManagementCallbacksV1Controller extends BaseController {
  /**
   * Returns the name and endpoint URL of the callback listening services registered for a given account.
   *
   * @param account Account identifier in "##########-#####".
   * @return Response from the API call
   */
  async listRegisteredCallbacks(
    account: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RegisteredCallbacks[]>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V1');
    const mapped = req.prepareArgs({ account: [account, string()] });
    req.appendTemplatePath`/callbacks/${mapped.account}`;
    req.throwOn(400, FotaV1ResultError, 'Unexpected error.');
    return req.callAsJson(array(registeredCallbacksSchema), requestOptions);
  }

  /**
   * Registers a URL to receive RESTful messages from a callback service when new firmware versions are
   * available and when upgrades start and finish.
   *
   * @param account      Account identifier in "##########-#####".
   * @param body         Callback details.
   * @return Response from the API call
   */
  async registerCallback(
    account: string,
    body: FotaV1CallbackRegistrationRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FotaV1CallbackRegistrationResult>> {
    const req = this.createRequest('POST');
    req.baseUrl('Software Management V1');
    const mapped = req.prepareArgs({
      account: [account, string()],
      body: [body, fotaV1CallbackRegistrationRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/callbacks/${mapped.account}`;
    req.throwOn(400, FotaV1ResultError, 'Unexpected error.');
    return req.callAsJson(
      fotaV1CallbackRegistrationResultSchema,
      requestOptions
    );
  }

  /**
   * Deregisters the callback endpoint and stops ThingSpace from sending FOTA callback messages for the
   * specified account.
   *
   * @param account Account identifier in "##########-#####".
   * @param service Callback type. Must be 'Fota' for Software Management Services API.
   * @return Response from the API call
   */
  async deregisterCallback(
    account: string,
    service: CallbackServiceEnum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FotaV1SuccessResult>> {
    const req = this.createRequest('DELETE');
    req.baseUrl('Software Management V1');
    const mapped = req.prepareArgs({
      account: [account, string()],
      service: [service, callbackServiceEnumSchema],
    });
    req.appendTemplatePath`/callbacks/${mapped.account}/name/${mapped.service}`;
    req.throwOn(400, FotaV1ResultError, 'Unexpected error.');
    return req.callAsJson(fotaV1SuccessResultSchema, requestOptions);
  }
}
