/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { WNPRestErrorResponseError } from '../errors/wNPRestErrorResponseError';
import {
  GetDeviceExperienceScoreBulkRequest,
  getDeviceExperienceScoreBulkRequestSchema,
} from '../models/getDeviceExperienceScoreBulkRequest';
import {
  GetDeviceExperienceScoreHistoryRequest,
  getDeviceExperienceScoreHistoryRequestSchema,
} from '../models/getDeviceExperienceScoreHistoryRequest';
import {
  GetNetworkConditionsRequest,
  getNetworkConditionsRequestSchema,
} from '../models/getNetworkConditionsRequest';
import {
  GetWirelessCoverageRequest,
  getWirelessCoverageRequestSchema,
} from '../models/getWirelessCoverageRequest';
import {
  WNPRequestResponse,
  wNPRequestResponseSchema,
} from '../models/wNPRequestResponse';
import { BaseController } from './baseController';

export class WirelessNetworkPerformanceController extends BaseController {
  /**
   * WNP Query for current network condition.
   *
   * @param body         Request for current network health.
   * @return Response from the API call
   */
  async nearRealTimeNetworkConditions(
    body: GetNetworkConditionsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WNPRequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v1/intelligence/network-conditions'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, getNetworkConditionsRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(WNPRestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(wNPRequestResponseSchema, requestOptions);
  }

  /**
   * Run a report to determine network types available and available coverage. Network types covered
   * include: CAT-M, NB-IOT, LTE, LTE-AWS and 5GNW.
   *
   * @param body         Request for network coverage details.
   * @return Response from the API call
   */
  async domestic4GAnd5gNationwideNetworkCoverage(
    body: GetWirelessCoverageRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WNPRequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v1/intelligence/wireless-coverage'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, getWirelessCoverageRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(WNPRestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(wNPRequestResponseSchema, requestOptions);
  }

  /**
   * Identify the direction and general distance of nearby cell sites and the technology supported by the
   * equipment.
   *
   * @param body         Request for cell site proximity.
   * @return Response from the API call
   */
  async siteProximity(
    body: GetNetworkConditionsRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WNPRequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v1/intelligence/site-proximity/action/list'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, getNetworkConditionsRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(WNPRestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(wNPRequestResponseSchema, requestOptions);
  }

  /**
   * A report of a specific device's service scores over a 30 day period.
   *
   * @param body         Request for a device's 30 day experience.
   * @return Response from the API call
   */
  async deviceExperience30daysHistory(
    body: GetDeviceExperienceScoreHistoryRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WNPRequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v1/intelligence/device-experience/history/30-days'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, getDeviceExperienceScoreHistoryRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(WNPRestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(wNPRequestResponseSchema, requestOptions);
  }

  /**
   * Run a report to view the latest device experience score for specific devices.
   *
   * @param body         Request for bulk latest history details.
   * @return Response from the API call
   */
  async deviceExperienceBulkLatest(
    body: GetDeviceExperienceScoreBulkRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<WNPRequestResponse>> {
    const req = this.createRequest(
      'POST',
      '/m2m/v1/intelligence/device-experience/bulk/latest'
    );
    req.baseUrl('Thingspace');
    const mapped = req.prepareArgs({
      body: [body, getDeviceExperienceScoreBulkRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.defaultToError(WNPRestErrorResponseError, 'Error response');
    req.authenticate([{ oauth2: true }]);
    return req.callAsJson(wNPRequestResponseSchema, requestOptions);
  }
}
