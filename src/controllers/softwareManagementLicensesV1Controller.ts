/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { FotaV1ResultError } from '../errors/fotaV1ResultError';
import {
  FotaV1SuccessResult,
  fotaV1SuccessResultSchema,
} from '../models/fotaV1SuccessResult';
import {
  V1LicensesAssignedRemovedRequest,
  v1LicensesAssignedRemovedRequestSchema,
} from '../models/v1LicensesAssignedRemovedRequest';
import {
  V1LicensesAssignedRemovedResult,
  v1LicensesAssignedRemovedResultSchema,
} from '../models/v1LicensesAssignedRemovedResult';
import {
  V1ListOfLicensesToRemove,
  v1ListOfLicensesToRemoveSchema,
} from '../models/v1ListOfLicensesToRemove';
import {
  V1ListOfLicensesToRemoveRequest,
  v1ListOfLicensesToRemoveRequestSchema,
} from '../models/v1ListOfLicensesToRemoveRequest';
import {
  V1ListOfLicensesToRemoveResult,
  v1ListOfLicensesToRemoveResultSchema,
} from '../models/v1ListOfLicensesToRemoveResult';
import { string } from '../schema';
import { BaseController } from './baseController';

export class SoftwareManagementLicensesV1Controller extends BaseController {
  /**
   * Assigns licenses to a specified list of devices so that firmware upgrades can be scheduled for those
   * devices.
   *
   * @param account      Account identifier in "##########-#####".
   * @param body         IMEIs of the devices to assign licenses to.
   * @return Response from the API call
   * @deprecated
   */
  async assignLicensesToDevices(
    account: string,
    body: V1LicensesAssignedRemovedRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V1LicensesAssignedRemovedResult>> {
    const req = this.createRequest('POST');
    req.baseUrl('Software Management V1');
    const mapped = req.prepareArgs({
      account: [account, string()],
      body: [body, v1LicensesAssignedRemovedRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/licenses/${mapped.account}/assign`;
    req.deprecated('SoftwareManagementLicensesV1Controller.assignLicensesToDevices');
    req.throwOn(400, FotaV1ResultError, 'Unexpected error.');
    return req.callAsJson(
      v1LicensesAssignedRemovedResultSchema,
      requestOptions
    );
  }

  /**
   * Remove unused licenses from device.
   *
   * @param account      Account identifier in "##########-#####".
   * @param body         IMEIs of the devices to remove licenses from.
   * @return Response from the API call
   * @deprecated
   */
  async removeLicensesFromDevices(
    account: string,
    body: V1LicensesAssignedRemovedRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V1LicensesAssignedRemovedResult>> {
    const req = this.createRequest('POST');
    req.baseUrl('Software Management V1');
    const mapped = req.prepareArgs({
      account: [account, string()],
      body: [body, v1LicensesAssignedRemovedRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/licenses/${mapped.account}/remove`;
    req.deprecated('SoftwareManagementLicensesV1Controller.removeLicensesFromDevices');
    req.throwOn(400, FotaV1ResultError, 'Unexpected error.');
    return req.callAsJson(
      v1LicensesAssignedRemovedResultSchema,
      requestOptions
    );
  }

  /**
   * Creates a list of devices from which licenses will be removed if the number of MRC licenses becomes
   * less than the number of assigned licenses.
   *
   * @param account      Account identifier in "##########-#####".
   * @param body         Cancellation candidate device list.
   * @return Response from the API call
   * @deprecated
   */
  async createListOfLicensesToRemove(
    account: string,
    body: V1ListOfLicensesToRemoveRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V1ListOfLicensesToRemoveResult>> {
    const req = this.createRequest('POST');
    req.baseUrl('Software Management V1');
    const mapped = req.prepareArgs({
      account: [account, string()],
      body: [body, v1ListOfLicensesToRemoveRequestSchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/licenses/${mapped.account}/cancel`;
    req.deprecated('SoftwareManagementLicensesV1Controller.createListOfLicensesToRemove');
    req.throwOn(400, FotaV1ResultError, 'Unexpected error.');
    return req.callAsJson(v1ListOfLicensesToRemoveResultSchema, requestOptions);
  }

  /**
   * Deletes the entire list of cancellation candidate devices.
   *
   * @param account Account identifier in "##########-#####".
   * @return Response from the API call
   * @deprecated
   */
  async deleteListOfLicensesToRemove(
    account: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FotaV1SuccessResult>> {
    const req = this.createRequest('DELETE');
    req.baseUrl('Software Management V1');
    const mapped = req.prepareArgs({ account: [account, string()] });
    req.appendTemplatePath`/licenses/${mapped.account}/cancel`;
    req.deprecated('SoftwareManagementLicensesV1Controller.deleteListOfLicensesToRemove');
    req.throwOn(400, FotaV1ResultError, 'Unexpected error.');
    return req.callAsJson(fotaV1SuccessResultSchema, requestOptions);
  }

  /**
   * Returns a list of devices from which licenses will be removed if the number of MRC licenses becomes
   * less than the number of assigned licenses.
   *
   * @param account    Account identifier in "##########-#####".
   * @param startIndex The zero-based number of the first record to return. Set startIndex=0 for the first
   *                             request. If there are more than 1,000 devices in the response, set startIndex=1000 for
   *                             the second request, 2000 for the third request, etc.
   * @return Response from the API call
   * @deprecated
   */
  async listLicensesToRemove(
    account: string,
    startIndex: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V1ListOfLicensesToRemove>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V1');
    const mapped = req.prepareArgs({
      account: [account, string()],
      startIndex: [startIndex, string()],
    });
    req.appendTemplatePath`/licenses/${mapped.account}/cancel/index/${mapped.startIndex}`;
    req.deprecated('SoftwareManagementLicensesV1Controller.listLicensesToRemove');
    req.throwOn(400, FotaV1ResultError, 'Unexpected error.');
    return req.callAsJson(v1ListOfLicensesToRemoveSchema, requestOptions);
  }
}
