/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { FotaV3ResultError } from '../errors/fotaV3ResultError';
import {
  CampaignStatusEnum,
  campaignStatusEnumSchema,
} from '../models/campaignStatusEnum';
import {
  DeviceFirmwareUpgrade,
  deviceFirmwareUpgradeSchema,
} from '../models/deviceFirmwareUpgrade';
import {
  V3CampaignDevice,
  v3CampaignDeviceSchema,
} from '../models/v3CampaignDevice';
import {
  V3CampaignHistory,
  v3CampaignHistorySchema,
} from '../models/v3CampaignHistory';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';

export class SoftwareManagementReportsV3Controller extends BaseController {
  /**
   * Retrieve a list of campaigns for an account that have a specified campaign status.
   *
   * @param acc                Account identifier.
   * @param campaignStatus     Campaign status.
   * @param lastSeenCampaignId Last seen campaign Id.
   * @return Response from the API call
   */
  async getCampaignHistoryByStatus(
    acc: string,
    campaignStatus: CampaignStatusEnum,
    lastSeenCampaignId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3CampaignHistory>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V3');
    const mapped = req.prepareArgs({
      acc: [acc, string()],
      campaignStatus: [campaignStatus, campaignStatusEnumSchema],
      lastSeenCampaignId: [lastSeenCampaignId, optional(string())],
    });
    req.query('campaignStatus', mapped.campaignStatus);
    req.query('lastSeenCampaignId', mapped.lastSeenCampaignId);
    req.appendTemplatePath`/reports/${mapped.acc}/firmware/campaigns`;
    req.throwOn(400, FotaV3ResultError, 'Unexpected error.');
    return req.callAsJson(v3CampaignHistorySchema, requestOptions);
  }

  /**
   * Retrieve campaign history for a specific device.
   *
   * @param acc      Account identifier.
   * @param deviceId Device IMEI identifier.
   * @return Response from the API call
   */
  async getDeviceFirmwareUpgradeHistory(
    acc: string,
    deviceId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceFirmwareUpgrade[]>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V3');
    const mapped = req.prepareArgs({
      acc: [acc, string()],
      deviceId: [deviceId, string()],
    });
    req.appendTemplatePath`/reports/${mapped.acc}/devices/${mapped.deviceId}`;
    req.throwOn(400, FotaV3ResultError, 'Unexpected error.');
    return req.callAsJson(array(deviceFirmwareUpgradeSchema), requestOptions);
  }

  /**
   * Retrieve a list of all devices in a campaign and the status of each device.
   *
   * @param acc              Account identifier.
   * @param campaignId       Campaign identifier.
   * @param lastSeenDeviceId Last seen device identifier.
   * @return Response from the API call
   */
  async getCampaignDeviceStatus(
    acc: string,
    campaignId: string,
    lastSeenDeviceId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V3CampaignDevice>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V3');
    const mapped = req.prepareArgs({
      acc: [acc, string()],
      campaignId: [campaignId, string()],
      lastSeenDeviceId: [lastSeenDeviceId, optional(string())],
    });
    req.query('lastSeenDeviceId', mapped.lastSeenDeviceId);
    req.appendTemplatePath`/reports/${mapped.acc}/campaigns/${mapped.campaignId}/devices`;
    req.throwOn(400, FotaV3ResultError, 'Unexpected error.');
    return req.callAsJson(v3CampaignDeviceSchema, requestOptions);
  }
}
