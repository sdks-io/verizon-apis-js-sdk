/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { FotaV3ResultError } from '../errors/fotaV3ResultError';
import {
  DeviceFirmwareList,
  deviceFirmwareListSchema,
} from '../models/deviceFirmwareList';
import {
  DeviceFirmwareVersionUpdateResult,
  deviceFirmwareVersionUpdateResultSchema,
} from '../models/deviceFirmwareVersionUpdateResult';
import { FirmwareIMEI, firmwareIMEISchema } from '../models/firmwareIMEI';
import {
  FirmwarePackage,
  firmwarePackageSchema,
} from '../models/firmwarePackage';
import {
  FirmwareProtocolEnum,
  firmwareProtocolEnumSchema,
} from '../models/firmwareProtocolEnum';
import { array, string } from '../schema';
import { BaseController } from './baseController';

export class FirmwareV3Controller extends BaseController {
  /**
   * This endpoint allows user to list the firmware of an account.
   *
   * @param acc      Account identifier.
   * @param protocol Filter to retrieve a specific protocol type used.
   * @return Response from the API call
   */
  async listAvailableFirmware(
    acc: string,
    protocol: FirmwareProtocolEnum,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<FirmwarePackage[]>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V3');
    const mapped = req.prepareArgs({
      acc: [acc, string()],
      protocol: [protocol, firmwareProtocolEnumSchema],
    });
    req.query('protocol', mapped.protocol);
    req.appendTemplatePath`/firmware/${mapped.acc}`;
    req.throwOn(400, FotaV3ResultError, 'Unexpected error.');
    return req.callAsJson(array(firmwarePackageSchema), requestOptions);
  }

  /**
   * Synchronize ThingSpace with the FOTA server for up to 100 devices.
   *
   * @param acc          Account identifier.
   * @param body         DeviceIds to get firmware info synchronously.
   * @return Response from the API call
   */
  async synchronizeDeviceFirmware(
    acc: string,
    body: FirmwareIMEI,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceFirmwareList>> {
    const req = this.createRequest('PUT');
    req.baseUrl('Software Management V3');
    const mapped = req.prepareArgs({
      acc: [acc, string()],
      body: [body, firmwareIMEISchema],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/firmware/${mapped.acc}/devices`;
    req.throwOn(400, FotaV3ResultError, 'Unexpected error.');
    return req.callAsJson(deviceFirmwareListSchema, requestOptions);
  }

  /**
   * Ask a device to report its firmware version asynchronously.
   *
   * @param acc      Account identifier.
   * @param deviceId Device identifier.
   * @return Response from the API call
   */
  async reportDeviceFirmware(
    acc: string,
    deviceId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceFirmwareVersionUpdateResult>> {
    const req = this.createRequest('PUT');
    req.baseUrl('Software Management V3');
    const mapped = req.prepareArgs({
      acc: [acc, string()],
      deviceId: [deviceId, string()],
    });
    req.appendTemplatePath`/firmware/${mapped.acc}/async/${mapped.deviceId}`;
    req.throwOn(400, FotaV3ResultError, 'Unexpected error.');
    return req.callAsJson(
      deviceFirmwareVersionUpdateResultSchema,
      requestOptions
    );
  }
}
