/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  BillUsageRequest,
  billUsageRequestSchema,
} from '../models/billUsageRequest';
import {
  DeviceLocationSubscription,
  deviceLocationSubscriptionSchema,
} from '../models/deviceLocationSubscription';
import { optional, string, unknown } from '../schema';
import { BaseController } from './baseController';
import { DeviceLocationResultError } from '../errors/deviceLocationResultError';

export class DevicesLocationSubscriptionsController extends BaseController {
  /**
   * This subscriptions endpoint retrieves an account's current location subscription status.
   *
   * @param accountName Account identifier in "##########-#####".
   * @return Response from the API call
   */
  async getLocationServiceSubscriptionStatus(
    accountName: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceLocationSubscription>> {
    const req = this.createRequest('GET');
    req.baseUrl('Device Location');
    const mapped = req.prepareArgs({ accountName: [accountName, string()] });
    req.appendTemplatePath`/subscriptions/${mapped.accountName}`;
    req.throwOn(400, DeviceLocationResultError, 'Unexpected error.');
    req.authenticate([{ thingspaceOauth: true, vZM2mToken: true }]);
    return req.callAsJson(deviceLocationSubscriptionSchema, requestOptions);
  }

  /**
   * This endpoint allows user to search for billable usage for accounts based on the provided date range.
   *
   * @param body         Request to obtain billable usage for accounts.
   * @return Response from the API call
   */
  async getLocationServiceUsage(
    body: BillUsageRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<unknown | undefined>> {
    const req = this.createRequest('POST', '/usage');
    req.baseUrl('Device Location');
    const mapped = req.prepareArgs({ body: [body, billUsageRequestSchema] });
    req.header('Content-Type', '*/*');
    req.json(mapped.body);
    req.throwOn(400, DeviceLocationResultError, 'Unexpected error.');
    req.authenticate([{ thingspaceOauth: true, vZM2mToken: true }]);
    return req.callAsJson(optional(unknown()), requestOptions);
  }
}
