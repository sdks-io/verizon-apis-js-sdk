/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, FileWrapper, RequestOptions } from '../core';
import { FotaV2ResultError } from '../errors/fotaV2ResultError';
import {
  RetrievesAvailableFilesResponseList,
  retrievesAvailableFilesResponseListSchema,
} from '../models/retrievesAvailableFilesResponseList';
import {
  UploadConfigurationFilesResponse,
  uploadConfigurationFilesResponseSchema,
} from '../models/uploadConfigurationFilesResponse';
import { optional, string } from '../schema';
import { BaseController } from './baseController';

export class ConfigurationFilesController extends BaseController {
  /**
   * You can retrieve a list of configuration or supplementary of files for an account.
   *
   * @param acc              Account identifier.
   * @param distributionType Filter the distributionType to only retrieve files for a specific distribution
   *                                   type.
   * @return Response from the API call
   */
  async getListOfFiles(
    acc: string,
    distributionType: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RetrievesAvailableFilesResponseList>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      acc: [acc, string()],
      distributionType: [distributionType, string()],
    });
    req.query('distributionType', mapped.distributionType);
    req.appendTemplatePath`/files/${mapped.acc}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(
      retrievesAvailableFilesResponseListSchema,
      requestOptions
    );
  }

  /**
   * Uploads a configuration/supplementary file for an account. ThingSpace generates a fileName after the
   * upload and is returned in the response.
   *
   * @param acc             Account identifier.
   * @param fileupload      The file to upload.
   * @param fileVersion     Version of the file.
   * @param make            The software-applicable device make.
   * @param model           The software-applicable device model.
   * @param localTargetPath Local target path on the device.
   * @return Response from the API call
   */
  async uploadConfigFile(
    acc: string,
    fileupload?: FileWrapper,
    fileVersion?: string,
    make?: string,
    model?: string,
    localTargetPath?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UploadConfigurationFilesResponse>> {
    const req = this.createRequest('POST');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      acc: [acc, string()],
      fileVersion: [fileVersion, optional(string())],
      make: [make, optional(string())],
      model: [model, optional(string())],
      localTargetPath: [localTargetPath, optional(string())],
    });
    req.formData({
      fileupload: fileupload,
      fileVersion: mapped.fileVersion,
      make: mapped.make,
      model: mapped.model,
      localTargetPath: mapped.localTargetPath,
    });
    req.appendTemplatePath`/files/${mapped.acc}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(
      uploadConfigurationFilesResponseSchema,
      requestOptions
    );
  }
}
