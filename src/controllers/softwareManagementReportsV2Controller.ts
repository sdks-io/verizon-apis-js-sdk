/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { FotaV2ResultError } from '../errors/fotaV2ResultError';
import {
  DeviceSoftwareUpgrade,
  deviceSoftwareUpgradeSchema,
} from '../models/deviceSoftwareUpgrade';
import {
  SoftwarePackage,
  softwarePackageSchema,
} from '../models/softwarePackage';
import {
  V2AccountDeviceList,
  v2AccountDeviceListSchema,
} from '../models/v2AccountDeviceList';
import {
  V2CampaignDevice,
  v2CampaignDeviceSchema,
} from '../models/v2CampaignDevice';
import {
  V2CampaignHistory,
  v2CampaignHistorySchema,
} from '../models/v2CampaignHistory';
import { array, optional, string } from '../schema';
import { BaseController } from './baseController';

export class SoftwareManagementReportsV2Controller extends BaseController {
  /**
   * This endpoint allows user to list a certain type of software of an account.
   *
   * @param account          Account identifier.
   * @param distributionType Filter distributionType to get specific type of software. Value is LWM2M, OMD-
   *                                   DM or HTTP.
   * @return Response from the API call
   */
  async listAvailableSoftware(
    account: string,
    distributionType?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<SoftwarePackage[]>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      distributionType: [distributionType, optional(string())],
    });
    req.query('distributionType', mapped.distributionType);
    req.appendTemplatePath`/software/${mapped.account}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(array(softwarePackageSchema), requestOptions);
  }

  /**
   * The device endpoint gets devices information of an account.
   *
   * @param account          Account identifier.
   * @param lastSeenDeviceId Last seen device identifier.
   * @param distributionType Filter distributionType to get specific type of devices. Values is LWM2M, OMD-
   *                                   DM or HTTP.
   * @return Response from the API call
   */
  async listAccountDevices(
    account: string,
    lastSeenDeviceId?: string,
    distributionType?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V2AccountDeviceList>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      lastSeenDeviceId: [lastSeenDeviceId, optional(string())],
      distributionType: [distributionType, optional(string())],
    });
    req.query('lastSeenDeviceId', mapped.lastSeenDeviceId);
    req.query('distributionType', mapped.distributionType);
    req.appendTemplatePath`/devices/${mapped.account}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(v2AccountDeviceListSchema, requestOptions);
  }

  /**
   * The endpoint allows user to get software upgrade history of a device based on device IMEI.
   *
   * @param account  Account identifier.
   * @param deviceId Device IMEI identifier.
   * @return Response from the API call
   */
  async getDeviceFirmwareUpgradeHistory(
    account: string,
    deviceId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeviceSoftwareUpgrade[]>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      deviceId: [deviceId, string()],
    });
    req.appendTemplatePath`/reports/${mapped.account}/devices/${mapped.deviceId}`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(array(deviceSoftwareUpgradeSchema), requestOptions);
  }

  /**
   * The report endpoint allows user to get campaign history of an account for specified status.
   *
   * @param account            Account identifier.
   * @param campaignStatus     Status of the campaign.
   * @param lastSeenCampaignId Last seen campaign Id.
   * @return Response from the API call
   */
  async getCampaignHistoryByStatus(
    account: string,
    campaignStatus: string,
    lastSeenCampaignId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V2CampaignHistory>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      campaignStatus: [campaignStatus, string()],
      lastSeenCampaignId: [lastSeenCampaignId, optional(string())],
    });
    req.query('campaignStatus', mapped.campaignStatus);
    req.query('lastSeenCampaignId', mapped.lastSeenCampaignId);
    req.appendTemplatePath`/reports/${mapped.account}/campaigns`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(v2CampaignHistorySchema, requestOptions);
  }

  /**
   * The report endpoint allows user to get the full list of device of a campaign.
   *
   * @param account          Account identifier.
   * @param campaignId       Campaign identifier.
   * @param lastSeenDeviceId Last seen device identifier.
   * @return Response from the API call
   */
  async getCampaignDeviceStatus(
    account: string,
    campaignId: string,
    lastSeenDeviceId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<V2CampaignDevice>> {
    const req = this.createRequest('GET');
    req.baseUrl('Software Management V2');
    const mapped = req.prepareArgs({
      account: [account, string()],
      campaignId: [campaignId, string()],
      lastSeenDeviceId: [lastSeenDeviceId, optional(string())],
    });
    req.query('lastSeenDeviceId', mapped.lastSeenDeviceId);
    req.appendTemplatePath`/reports/${mapped.account}/campaigns/${mapped.campaignId}/devices`;
    req.throwOn(400, FotaV2ResultError, 'Unexpected error.');
    return req.callAsJson(v2CampaignDeviceSchema, requestOptions);
  }
}
