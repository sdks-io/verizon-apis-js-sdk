/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import { EdgeDiscoveryResultError } from '../errors/edgeDiscoveryResultError';
import {
  DeregisterServiceEndpointResult,
  deregisterServiceEndpointResultSchema,
} from '../models/deregisterServiceEndpointResult';
import {
  ListAllServiceEndpointsResult,
  listAllServiceEndpointsResultSchema,
} from '../models/listAllServiceEndpointsResult';
import {
  ListOptimalServiceEndpointsResult,
  listOptimalServiceEndpointsResultSchema,
} from '../models/listOptimalServiceEndpointsResult';
import {
  RegisterServiceEndpointResult,
  registerServiceEndpointResultSchema,
} from '../models/registerServiceEndpointResult';
import {
  ResourcesEdgeHostedServiceWithProfileId,
  resourcesEdgeHostedServiceWithProfileIdSchema,
} from '../models/resourcesEdgeHostedServiceWithProfileId';
import {
  UpdateServiceEndpointResult,
  updateServiceEndpointResultSchema,
} from '../models/updateServiceEndpointResult';
import {
  UserEquipmentIdentityTypeEnum,
  userEquipmentIdentityTypeEnumSchema,
} from '../models/userEquipmentIdentityTypeEnum';
import { array, number, optional, string } from '../schema';
import { BaseController } from './baseController';

export class ServiceEndpointsController extends BaseController {
  /**
   * Returns a list of optimal Service Endpoints that client devices can connect to. **Note:** If a query
   * is sent with all of the parameters, it will fail with a "400" error. You can search based on the
   * following parameter combinations - Region plus Service Endpoints IDs and Subscriber density (density
   * is optional but recommended), Region plus Service Endpoints IDs and UEIdentity(Including UEIdentity
   * Type) and Service Endpoints IDs plus UEIdentity(Including UEIdentity Type).
   *
   * @param region              MEC region name. Current valid values are US_WEST_2
   *                                                             and US_EAST_1.
   * @param subscriberDensity   Minimum number of 4G/5G subscribers per square
   *                                                             kilometer.
   * @param uEIdentityType      Type of User Equipment identifier used in
   *                                                             `UEIdentity`.
   * @param uEIdentity          The identifier value for User Equipment. The type of
   *                                                             identifier is defined by the 'UEIdentityType'
   *                                                             parameter. The`IPAddress`format can be IPv4 or IPv6.
   * @param serviceEndpointsIds A system-defined string identifier representing one
   *                                                             or more registered Service Endpoints.
   * @return Response from the API call
   */
  async listOptimalServiceEndpoints(
    region?: string,
    subscriberDensity?: number,
    uEIdentityType?: UserEquipmentIdentityTypeEnum,
    uEIdentity?: string,
    serviceEndpointsIds?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ListOptimalServiceEndpointsResult>> {
    const req = this.createRequest('GET', '/serviceendpoints');
    const mapped = req.prepareArgs({
      region: [region, optional(string())],
      subscriberDensity: [subscriberDensity, optional(number())],
      uEIdentityType: [
        uEIdentityType,
        optional(userEquipmentIdentityTypeEnumSchema),
      ],
      uEIdentity: [uEIdentity, optional(string())],
      serviceEndpointsIds: [serviceEndpointsIds, optional(string())],
    });
    req.query('region', mapped.region);
    req.query('subscriberDensity', mapped.subscriberDensity);
    req.query('UEIdentityType', mapped.uEIdentityType);
    req.query('UEIdentity', mapped.uEIdentity);
    req.query('serviceEndpointsIds', mapped.serviceEndpointsIds);
    req.throwOn(400, EdgeDiscoveryResultError, 'HTTP 400 Bad Request.');
    req.throwOn(401, EdgeDiscoveryResultError, 'HTTP 401 Unauthorized.');
    req.defaultToError(EdgeDiscoveryResultError, 'HTTP 500 Internal Server Error.');
    return req.callAsJson(
      listOptimalServiceEndpointsResultSchema,
      requestOptions
    );
  }

  /**
   * Register Service Endpoints of a deployed application to specified MEC Platforms.
   *
   * @param body         An array of Service Endpoint data for a deployed
   *                                                                  application. The request body passes all of the
   *                                                                  needed parameters to create a service endpoint.
   *                                                                  Parameters will be edited here rather than the
   *                                                                  **Parameters** section above. The `ern`,
   *                                                                  `applicationServerProviderId`, `applicationId`
   *                                                                  and `serviceProfileID` parameters are required.
   *                                                                  **Note:** Currently, the only valid value for
   *                                                                  `applicationServerProviderId`is **AWS**. Also, if
   *                                                                  you do not know one of the optional values (i.e.
   *                                                                  URI), you can erase the line from the query by
   *                                                                  back-spacing over it.
   * @return Response from the API call
   */
  async registerServiceEndpoints(
    body: ResourcesEdgeHostedServiceWithProfileId[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<RegisterServiceEndpointResult>> {
    const req = this.createRequest('POST', '/serviceendpoints');
    const mapped = req.prepareArgs({
      body: [body, array(resourcesEdgeHostedServiceWithProfileIdSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.throwOn(400, EdgeDiscoveryResultError, 'HTTP 400 Bad Request.');
    req.throwOn(401, EdgeDiscoveryResultError, 'HTTP 401 Unauthorized.');
    req.defaultToError(EdgeDiscoveryResultError, 'HTTP 500 Internal Server Error.');
    return req.callAsJson(registerServiceEndpointResultSchema, requestOptions);
  }

  /**
   * Returns a list of all registered service endpoints.
   *
   * @return Response from the API call
   */
  async listAllServiceEndpoints(
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ListAllServiceEndpointsResult>> {
    const req = this.createRequest('GET', '/serviceendpointsall');
    req.throwOn(400, EdgeDiscoveryResultError, 'HTTP 400 Bad Request.');
    req.throwOn(401, EdgeDiscoveryResultError, 'HTTP 401 Unauthorized.');
    req.defaultToError(EdgeDiscoveryResultError, 'HTTP 500 Internal Server Error.');
    return req.callAsJson(listAllServiceEndpointsResultSchema, requestOptions);
  }

  /**
   * Returns endpoint information for all Service Endpoints registered to a specified serviceEndpointId.
   *
   * @param serviceEndpointsId A system-defined string identifier representing one or more registered
   *                                     Service Endpoints.
   * @return Response from the API call
   */
  async getServiceEndpoint(
    serviceEndpointsId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ResourcesEdgeHostedServiceWithProfileId[]>> {
    const req = this.createRequest('GET');
    const mapped = req.prepareArgs({
      serviceEndpointsId: [serviceEndpointsId, string()],
    });
    req.appendTemplatePath`/serviceendpoints/${mapped.serviceEndpointsId}`;
    req.throwOn(400, EdgeDiscoveryResultError, 'HTTP 400 Bad Request.');
    req.throwOn(401, EdgeDiscoveryResultError, 'HTTP 401 Unauthorized.');
    req.defaultToError(EdgeDiscoveryResultError, 'HTTP 500 Internal Server Error.');
    return req.callAsJson(
      array(resourcesEdgeHostedServiceWithProfileIdSchema),
      requestOptions
    );
  }

  /**
   * Update registered Service Endpoint information.
   *
   * @param serviceEndpointsId A system-defined string identifier
   *                                                                        representing one or more registered Service
   *                                                                        Endpoints.
   * @param body               Data needed for Service Endpoint
   *                                                                        information. The request body passes the
   *                                                                        rest of the needed parameters to create a
   *                                                                        service endpoint. Parameters other than
   *                                                                        `serviceEndpointsId` will be edited here
   *                                                                        rather than the **Parameters** section
   *                                                                        above. The `ern`,
   *                                                                        `applicationServerProviderId` and
   *                                                                        `applicationId` parameters are required.
   *                                                                        **Note:** Currently, the only valid value
   *                                                                        for `applicationServerProviderId`is **AWS**.
   * @return Response from the API call
   */
  async updateServiceEndpoint(
    serviceEndpointsId: string,
    body: ResourcesEdgeHostedServiceWithProfileId[],
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<UpdateServiceEndpointResult>> {
    const req = this.createRequest('PUT');
    const mapped = req.prepareArgs({
      serviceEndpointsId: [serviceEndpointsId, string()],
      body: [body, array(resourcesEdgeHostedServiceWithProfileIdSchema)],
    });
    req.header('Content-Type', 'application/json');
    req.json(mapped.body);
    req.appendTemplatePath`/serviceendpoints/${mapped.serviceEndpointsId}`;
    req.throwOn(400, EdgeDiscoveryResultError, 'HTTP 400 Bad Request.');
    req.throwOn(401, EdgeDiscoveryResultError, 'HTTP 401 Unauthorized.');
    req.defaultToError(EdgeDiscoveryResultError, 'HTTP 500 Internal Server Error.');
    return req.callAsJson(updateServiceEndpointResultSchema, requestOptions);
  }

  /**
   * Deregister an application's Service Endpoint from the MEC Platform(s).
   *
   * @param serviceEndpointsId A system-defined string identifier representing one or more registered
   *                                     Service Endpoints.
   * @return Response from the API call
   */
  async deregisterServiceEndpoint(
    serviceEndpointsId: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<DeregisterServiceEndpointResult>> {
    const req = this.createRequest('DELETE');
    const mapped = req.prepareArgs({
      serviceEndpointsId: [serviceEndpointsId, string()],
    });
    req.appendTemplatePath`/serviceendpoints/${mapped.serviceEndpointsId}`;
    req.throwOn(400, EdgeDiscoveryResultError, 'HTTP 400 Bad Request.');
    req.throwOn(401, EdgeDiscoveryResultError, 'HTTP 401 Unauthorized.');
    req.defaultToError(EdgeDiscoveryResultError, 'HTTP 500 Internal Server Error.');
    return req.callAsJson(
      deregisterServiceEndpointResultSchema,
      requestOptions
    );
  }
}
