/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import { ApiResponse, RequestOptions } from '../core';
import {
  EdgeServiceLaunchResultError,
} from '../errors/edgeServiceLaunchResultError';
import {
  CreateServiceLaunchRequest,
  createServiceLaunchRequestSchema,
} from '../models/createServiceLaunchRequest';
import {
  ServiceLaunchRequestResult,
  serviceLaunchRequestResultSchema,
} from '../models/serviceLaunchRequestResult';
import {
  ServiceLaunchRequestsResult,
  serviceLaunchRequestsResultSchema,
} from '../models/serviceLaunchRequestsResult';
import { bigint, nullable, optional, string } from '../schema';
import { BaseController } from './baseController';

export class ServiceLaunchRequestsController extends BaseController {
  /**
   * Get information related to a service launch request.
   *
   * @param accountName   User account name.
   * @param userName
   * @param id            Service launch request Id.
   * @param correlationId
   * @param name          Service request name.
   * @param offset
   * @param limit
   * @return Response from the API call
   */
  async getServiceLaunchRequest(
    accountName: string,
    userName: string,
    id?: string | null,
    correlationId?: string,
    name?: string,
    offset?: bigint,
    limit?: bigint,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServiceLaunchRequestsResult>> {
    const req = this.createRequest('GET', '/v1/service/launch/request');
    req.baseUrl('Services');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      userName: [userName, string()],
      id: [id, optional(nullable(string()))],
      correlationId: [correlationId, optional(string())],
      name: [name, optional(string())],
      offset: [offset, optional(bigint())],
      limit: [limit, optional(bigint())],
    });
    req.header('AccountName', mapped.accountName);
    req.header('userName', mapped.userName);
    req.header('correlationId', mapped.correlationId);
    req.query('id', mapped.id);
    req.query('name', mapped.name);
    req.query('offset', mapped.offset);
    req.query('limit', mapped.limit);
    req.throwOn(400, EdgeServiceLaunchResultError, 'Bad Request.');
    req.throwOn(401, EdgeServiceLaunchResultError, 'Unauthorized.');
    req.throwOn(403, EdgeServiceLaunchResultError, 'Forbidden.');
    req.throwOn(404, EdgeServiceLaunchResultError, 'Not found.');
    req.throwOn(415, EdgeServiceLaunchResultError, 'Unsupported media type.');
    req.throwOn(429, EdgeServiceLaunchResultError, 'Too many requests.');
    req.throwOn(500, EdgeServiceLaunchResultError, 'Internal Server Error.');
    req.defaultToError(EdgeServiceLaunchResultError, 'Unexpected error.');
    return req.callAsJson(serviceLaunchRequestsResultSchema, requestOptions);
  }

  /**
   * Create a request for launching a service.
   *
   * @param accountName   User account name.
   * @param userName
   * @param correlationId
   * @param body          Request for launching a service.
   * @return Response from the API call
   */
  async createServiceLaunchRequest(
    accountName: string,
    userName: string,
    correlationId?: string,
    body?: CreateServiceLaunchRequest,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServiceLaunchRequestResult>> {
    const req = this.createRequest('POST', '/v1/service/launch/request');
    req.baseUrl('Services');
    const mapped = req.prepareArgs({
      accountName: [accountName, string()],
      userName: [userName, string()],
      correlationId: [correlationId, optional(string())],
      body: [body, optional(createServiceLaunchRequestSchema)],
    });
    req.header('AccountName', mapped.accountName);
    req.header('userName', mapped.userName);
    req.header('Content-Type', '*/*');
    req.header('correlationId', mapped.correlationId);
    req.json(mapped.body);
    req.throwOn(400, EdgeServiceLaunchResultError, 'HTTP 400 Bad Request.');
    req.throwOn(401, EdgeServiceLaunchResultError, 'HTTP 401 Unauthorized.');
    req.throwOn(404, EdgeServiceLaunchResultError, 'HTTP 404 Not found.');
    req.throwOn(500, EdgeServiceLaunchResultError, 'Internal Server Error.');
    req.defaultToError(EdgeServiceLaunchResultError, 'HTTP 500 Internal Server Error.');
    return req.callAsJson(serviceLaunchRequestResultSchema, requestOptions);
  }

  /**
   * This endpoint allows the user to submit a service request that describes the resource requirements
   * of a service. This API submit an object of the service request and moves it to STATE from “DRAFT”
   * to “INSTANTIATED” and triggers the launch flow.
   *
   * @param id            A unique Id assigned to the request by system calling API.
   * @param accountName   User account name.
   * @param userName
   * @param correlationId
   * @return Response from the API call
   */
  async submitServiceLaunchRequest(
    id: string,
    accountName: string,
    userName: string,
    correlationId?: string,
    requestOptions?: RequestOptions
  ): Promise<ApiResponse<ServiceLaunchRequestResult>> {
    const req = this.createRequest('PUT');
    req.baseUrl('Services');
    const mapped = req.prepareArgs({
      id: [id, string()],
      accountName: [accountName, string()],
      userName: [userName, string()],
      correlationId: [correlationId, optional(string())],
    });
    req.header('AccountName', mapped.accountName);
    req.header('userName', mapped.userName);
    req.header('correlationId', mapped.correlationId);
    req.appendTemplatePath`/v1/service/launch/request/${mapped.id}/submit`;
    req.throwOn(400, EdgeServiceLaunchResultError, 'HTTP 400 Bad Request.');
    req.throwOn(401, EdgeServiceLaunchResultError, 'HTTP 401 Unauthorized.');
    req.throwOn(412, EdgeServiceLaunchResultError, 'Precondition Failed.');
    req.throwOn(500, EdgeServiceLaunchResultError, 'Internal Server Error.');
    req.defaultToError(EdgeServiceLaunchResultError, 'HTTP 500 Internal Server Error.');
    return req.callAsJson(serviceLaunchRequestResultSchema, requestOptions);
  }
}
