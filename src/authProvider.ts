/**
 * VerizonLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

import {
  compositeAuthenticationProvider,
  customHeaderAuthenticationProvider,
  requestAuthenticationProvider,
} from './authentication';
import { Configuration } from './configuration';
import { OauthToken } from './models/oauthToken';
import { ThingspaceOauthManager } from './thingspaceOauthManager';

export function createAuthProviderFromConfig(
  config: Partial<Configuration>,
  thingspaceOauth: () => ThingspaceOauthManager | undefined
) {
  const authConfig = {
    thingspaceOauth:
      config.thingspaceOauthCredentials &&
      requestAuthenticationProvider (
        config.thingspaceOauthCredentials.oauthToken,
        thingspaceOauthTokenProvider(thingspaceOauth, config.thingspaceOauthCredentials.oauthTokenProvider),
        config.thingspaceOauthCredentials.oauthOnTokenUpdate
    ),
    vZM2mToken:
      config.vZM2mTokenCredentials &&
      customHeaderAuthenticationProvider (
        config.vZM2mTokenCredentials
    ),
  };

  return compositeAuthenticationProvider <
    keyof typeof authConfig,
    typeof authConfig
  > (authConfig);
}

function thingspaceOauthTokenProvider(
  thingspaceOauth: () => ThingspaceOauthManager | undefined,
  defaultProvider: ((lastOAuthToken: OauthToken | undefined,
    authManager: ThingspaceOauthManager) => Promise<OauthToken>) | undefined
): ((token: OauthToken | undefined) => Promise<OauthToken>) | undefined {
  return (token: OauthToken | undefined) => {
    const manager = thingspaceOauth();
    if (manager === undefined) {
      throw Error('Unable to find the OAuthManager instance');
    }
    if (defaultProvider === undefined) {
      return manager.updateToken(token);
    }
    return defaultProvider(token, manager);
  };
}

